https://docs.python.org/3/tutorial/datastructures.html

list.append(x) : Add an item to the end of the list. Equivalent to a[len(a):] = [x].
list.extend(iterable) : Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.
list.insert(i, x) : Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).
list.remove(x) : Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

list.pop([i]) : Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list.

slist.pop([i]) : Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list.

list.index(x[, start[, end]]) : Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item

x = [10, 20, 30, 30, 40, 30, 50]
x.index(30) - is 2
x.index(30,2,4) - is 2 
x.index(30,3,4) - is 3

list.count(x) : Return the number of times x appears in the list.

list.sort(*, key=None, reverse=False) : Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
x.sort()
x.sort(reverse=True)

list.reverse() : Reverse the elements of the list in place.

list.copy() : Return a shallow copy of the list. Equivalent to a[:].


Using Lists as Stacks : use append to add to the end end and pop to pop from the end.
Using Lists as Queues : We can use insert and pop but inserting at the begning is not efficient(because all of the other elements have to be shifted by one)
To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. For example:

from collections import deque
queue = deque(["Eric", "John", "Michael"])
queue.append("Terry")           # Terry arrives
queue.append("Graham")          # Graham arrives
queue.popleft()                 # The first to arrive now leaves

List Comprehensions
List comprehensions provide a concise way to create lists.

squares = []
for x in range(10):
    squares.append(x**2)

Note that this creates (or overwrites) a variable named x that still exists after the loop completes. We can calculate the list of squares without any side effects using:
squares = list(map(lambda x: x**2, range(10)))

or, equivalently:

squares = [x**2 for x in range(10)]
which is more concise and readable.

A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:

[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

and itâ€™s equivalent to:

combs = []
for x in [1,2,3]:
    for y in [3,1,4]:
        if x != y:
            combs.append((x, y))

freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']
[weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']

# flatten a list using a listcomp with two 'for'
vec = [[1,2,3], [4,5,6], [7,8,9]]
[num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]

x = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

for i in x:
    for j in i:
        print(x[i][j])
