
https://cloud.google.com/storage/docs

Available storage classes

Standard Storage	STANDARD	None	 >99.99% in multi-regions and dual-regions, 99.99% in regions

Nearline Storage	NEARLINE	30 days	 99.95% in multi-regions and dual-regions, 99.9% in regions

Coldline Storage	COLDLINE	90 days	 99.95% in multi-regions and dual-regions, 99.9% in regions

Archive Storage 	ARCHIVE	    365 days 99.95% in multi-regions and dual-regions, 99.9% in regions

Standard Storage is best for data that is frequently accessed ("hot" data) and/or stored for only brief periods of time.

Nearline Storage is a better choice than Standard Storage in scenarios where slightly lower availability, a 30-day minimum storage duration, and costs for data access are acceptable trade-offs for lowered at-rest storage costs.

Nearline Storage is ideal for data you plan to read or modify on average once per month or less. For example, if you want to continuously add files to Cloud Storage and plan to access those files once a month for analysis, Nearline Storage is a great choice.

Nearline Storage is also appropriate for data backup, long-tail multimedia content, and data archiving. Note, however, that for data accessed less frequently than once a quarter, Coldline Storage or Archive Storage are more cost-effective

Coldline Storage is a very-low-cost, highly durable storage service for storing infrequently accessed data. Coldline Storage is a better choice than Standard Storage or Nearline Storage in scenarios where slightly lower availability, a 90-day minimum storage duration, and higher costs for data access are acceptable trade-offs for lowered at-rest storage costs.

Archive Storage is the lowest-cost, highly durable storage service for data archiving, online backup, and disaster recovery. Unlike the "coldest" storage services offered by other Cloud providers, your data is available within milliseconds, not hours or days.


---
Key terms

Projects
All data in Cloud Storage belongs inside a project. A project consists of a set of users, a set of APIs, and billing, authentication, and monitoring settings for those APIs. You can have one project or multiple projects.

Buckets
Buckets are the basic containers that hold your data. Everything that you store in Cloud Storage must be contained in a bucket. You can use buckets to organize your data and control access to your data, but unlike directories and folders, you cannot nest buckets.
To Create a new bucket you need to choose:
a globally-unique name, because every bucket resides in a single Cloud Storage namespace
a geographic location 
a default storage class
you can change its default storage class after creation but you can't change name and location

There is a per-project rate limit to bucket creation and deletion of approximately 1 request every 2 seconds, so plan on fewer buckets and more objects in most cases. 
Highly available applications should not depend on bucket creation or deletion in the critical path of their application, due to rate limit and centralised namespace. better  pre-create all the buckets necessary.

Your bucket names must meet the following requirements:

Bucket names must contain only lowercase letters(no uppercase), numbers, dashes (-), underscores (_), and dots (.). Spaces are not allowed. Names containing dots require verification.
Bucket names must start and end with a number or letter.
Bucket names must contain 3-63 characters. Names containing dots can contain up to 222 characters, but each dot-separated component can be no longer than 63 characters.
Bucket names cannot be represented as an IP address in dotted-decimal notation (for example, 192.168.5.4).
Bucket names cannot begin with the "goog" prefix.
Bucket names cannot contain "google" or close misspellings, such as "g00gle".

Objects
Objects are the individual pieces of data that you store in Cloud Storage. There is no limit on the number of objects that you can create in a bucket.

Objects have two components: object data and object metadata.

Geo-redundancy
Data that is geo-redundant is stored redundantly in at least two separate geographic places separated by at least 100 miles. Objects stored in multi-regions and dual-regions are geo-redundant, regardless of their storage class.

Object immutability
Objects are immutable, which means that an uploaded object cannot change throughout its storage lifetime.In practice, this means that you cannot make incremental changes to objects, such as append operations or truncate operations. However, it is possible to replace objects that are stored in Cloud Storage, and doing so happens atomically: until the new upload completes the old version of the object is served to readers, and after the upload completes the new version of the object is served to readers. 



Choose where to store your data
This permanent choice defines the geographic placement of your data and affects cost, performance, and availability. Learn more

Location type
Multi-region Highest availability across largest area
Dual-region High availability and low latency across 2 regions
Region Lowest latency within a single region

Choose a default storage class for your data
A storage class sets costs for storage, retrieval, and operations. Pick a default storage class based on how long you plan to store your data and how often it will be accessed. Learn more

Standard Best for short-term storage and frequently accessed data
Nearline Best for backups and data accessed less than once a month
Coldline Best for disaster recovery and data accessed less than once a quarter
Archive Best for long-term digital preservation of data accessed less than once a year

Choose how to control access to objects
Access control
Uniform Ensure uniform access to all objects in the bucket by using only bucket-level permissions (IAM). This option becomes permanent after 90 days. Learn more
Fine-grained Specify access to individual objects by using object-level permissions (ACLs) in addition to your bucket-level permissions (IAM). Learn more

Advanced settings (optional)
Encryption 
Google-managed encryption key
No configuration required
Customer-managed encryption key (CMEK)
Manage via Google Cloud Key Management Service

Set a retention policy
Retain object for : number
then select from drop down seconds, days, months, years 

Task 2: Access Cloud Shell

You can use the Cloud Shell to manage projects and resources via command line without having to install the Cloud SDK and other tools on your computer.

Cloud shell provides the following:

Temporary Compute Engine VM
Command-line access to the instance via a browser
5 GB of persistent disk storage ($HOME dir)
Pre-installed Cloud SDK and other tools
gcloud: for working with Compute Engine and many Google Cloud services
gsutil: for working with Cloud Storage
kubectl: for working with Google Kubernetes Engine and Kubernetes
bq: for working with BigQuery
Language support for Java, Go, Python, Node.js, PHP, and Ruby
Web preview functionality
Built-in authorization for access to resources and instances

After 1 hour of inactivity, the Cloud Shell instance is recycled. Only the /home directory persists. Any changes made to the system configuration, including environment variables, are lost between sessions.

Task 3: Use Cloud Shell to create a Cloud Storage bucket

gsutil mb gs://saroj-test2

Task 4: Explore more Cloud Shell features

Click the More button (More) in the Cloud Shell toolbar to display further options.
Click Upload file. Upload any file from your local machine to the Cloud Shell VM. This file will be referred to as [MY_FILE].

gsutil cp 'Core Java Cheat Sheet (VJ).pdf' gs://saroj-test2

Task 5: Create a persistent state in Cloud Shell

In this section you will learn a best practice for using Cloud Shell. The gcloud command often requires you to specify values such as a Region, Zone, or Project ID. Entering them repeatedly increases the chance of making typing errors. If you use Cloud Shell frequently, you may want to set common values in environment variables and use them instead of typing the actual values.

gcloud compute regions list

INFRACLASS_REGION=europe-west1

echo $INFRACLASS_REGION

You can use environment variables like this in gcloud commands to reduce the opportunities for typos and so that you won't have to remember a lot of detailed information.

Every time you close Cloud Shell and reopen it, a new VM is allocated, and the environment variable you just set disappears. In the next steps, you create a file to set the value so that you won't have to enter the command each time Cloud Shell is reset.


mkdir infraclass
touch infraclass/config

echo INFRACLASS_REGION=$INFRACLASS_REGION >> ~/infraclass/config

source infraclass/config
echo $INFRACLASS_REGION

Modify the bash profile and create persistence

nano .profile
source infraclass/config
Press Ctrl+O, ENTER to save the file, and then press Ctrl+X to exit nano.

Close and then re-open Cloud Shell to reset the VM.
Use the echo command to verify that the variable is still set:

Task 6: Review the Google Cloud interface

The Google Cloud interface consists of two parts: the Cloud Console and Cloud Shell.

The Console:

Provides a fast way to perform tasks.
Presents options to you, instead of requiring you to know them.
Performs behind-the-scenes validation before submitting the commands.
Cloud Shell provides:

Detailed control
A complete range of options and features
A path to automation through scripting


Task 1: Use Marketplace to build a deployment

Task 2: Examine the deployment

In the right pane, click More about the software to view additional software details. Look at all the software that was installed.
Copy the Admin user and Admin password values to a text editor.
Click Visit the site to view the site in another browser tab. If you get an error, you might have to reload the page a couple of times.
Log in with the Admin user and Admin password values


