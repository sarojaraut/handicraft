create database link cmsdev connect to cms identified by cmsdev using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1523)) ) (CONNECT_DATA = (SERVICE_NAME = cmsdev) ) )';

create database link cmstst connect to cms identified by ritst using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1524)) ) (CONNECT_DATA = (SERVICE_NAME = cmstst) ) )';

create database link cmsts2 connect to cms identified by cmsts2 using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1526)) ) (CONNECT_DATA = (SERVICE_NAME = cmsts2) ) )';

create database link cmsts3 connect to cms identified by rits3 using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1527)) ) (CONNECT_DATA = (SERVICE_NAME = cmsts3) ) )';

create database link cmsts4 connect to cms identified by cmsts4 using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1528)) ) (CONNECT_DATA = (SERVICE_NAME = cmsts4) ) )';

create database link cmssp1 connect to cms identified by risp1 using '(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlcmstd)(PORT = 1554)) ) (CONNECT_DATA = (SERVICE_NAME = cmssp1) ) )';
---
---
create database link omstst connect to orderactive identified by orderactive using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlomstd)(PORT = 1574)) ) (CONNECT_DATA = (SERVICE_NAME = omstst) ) )';

create database link omsts2 connect to orderactive identified by orderactive using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlomstd)(PORT = 1576)) ) (CONNECT_DATA = (SERVICE_NAME = omsts2) ) )';

create database link omsts3 connect to orderactive identified by orderactive using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlomstd)(PORT = 1577)) ) (CONNECT_DATA = (SERVICE_NAME = omsts3) ) )';

create database link omsts4 connect to orderactive identified by orderactive using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlomstd)(PORT = 1578)) ) (CONNECT_DATA = (SERVICE_NAME = omsts4) ) )';

create database link omssp1 connect to orderactive identified by orderactive using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlomstd)(PORT = 1570)) ) (CONNECT_DATA = (SERVICE_NAME = omssp1) ) )';
--
--
create database link wmstst connect to rwm identified by rwmtst using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlwmstd)(PORT = 1524)) ) (CONNECT_DATA = (SERVICE_NAME = wmstst) ) )';

create database link wmsts2 connect to rwm identified by rwmts2 using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlwmstd)(PORT = 1526)) ) (CONNECT_DATA = (SERVICE_NAME = wmsts2) ) )';

create database link wmsts3 connect to rwm identified by rwmts3 using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlwmstd)(PORT = 1527)) ) (CONNECT_DATA = (SERVICE_NAME = wmsts3) ) )';

create database link wmsts4 connect to rwm identified by rwmts4 using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlwmstd)(PORT = 1528)) ) (CONNECT_DATA = (SERVICE_NAME = wmsts4) ) )';

create database link wmssp1 connect to rwm identified by rwmsp1 using ' (DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = rlwmstd)(PORT = 1533)) ) (CONNECT_DATA = (SERVICE_NAME = wmssp1) ) )';

/*
drop database link cmsdev;
drop database link cmstst;
drop database link cmsts2;
drop database link cmsts3;
drop database link cmsts4;
drop database link cmssp1;

drop database link omstst;
drop database link omsts2;
drop database link omsts4;
drop database link omssp1;

drop database link wmstst;
drop database link wmsts2;
drop database link wmsts4;
drop database link wmssp1;

select * from dual@wmstst;
select * from dual@wmsts2;
select * from dual@wmsts4;
select * from dual@wmssp1;

set sqlformat ansiconsole
select
    ao.object_name,
    ao.object_type,
    tst.status tst_status,
    ts2.status ts2_status,
    ts4.status ts4_status,
    sp1.status sp1_status
from
    all_objects ao
    full join user_objects@wmstst tst
    on (ao.object_name = tst.object_name)
    full join user_objects@wmsts2 ts2
    on (ao.object_name = ts2.object_name)
    full join user_objects@wmssp1 sp1
    on (ao.object_name = sp1.object_name)
    full join user_objects@wmsts4 ts4
    on (ao.object_name = ts4.object_name)
where ao.object_name like 'W_II_WEB_ORD%';

set sqlformat ansiconsole
select
    ao.object_name,
    ao.object_type,
    tst.status tst_status,
    ts2.status ts2_status,
    ts4.status ts4_status,
    sp1.status sp1_status
from
    all_objects ao
    full join user_objects@omstst tst
    on (ao.object_name = tst.object_name)
    full join user_objects@omsts2 ts2
    on (ao.object_name = ts2.object_name)
    full join user_objects@omssp1 sp1
    on (ao.object_name = sp1.object_name)
    full join user_objects@omsts4 ts4
    on (ao.object_name = ts4.object_name)
where ao.object_name like 'W_II_WEB_ORD%'
order by 1 ,2;

set sqlformat ansiconsole
select
    ao.object_name,
    ao.object_type,
    tst.status tst_status,
    ts2.status ts2_status,
    ts4.status ts4_status,
    sp1.status sp1_status
from
    all_objects ao
    full join user_objects@cmstst tst
    on (ao.object_name = tst.object_name)
    full join user_objects@cmsts2 ts2
    on (ao.object_name = ts2.object_name)
    full join user_objects@cmssp1 sp1
    on (ao.object_name = sp1.object_name)
    full join user_objects@cmsts4 ts4
    on (ao.object_name = ts4.object_name)
where ao.object_name like 'W_II_WEB_ORD%';

*/

These are the orders for which null response has been received from TCPL web service call. We need to investigate why/how null response is received from TCPL when xml response is expected.

I don't think ignoring null response would be a good idea. if this is happening frequently then we can put some patch work to auto-retry for these scenarios but good to know the root cause of null response and prevent if possible.

SELECT all_data.atr_cod_tech_key,
           all_data.prd_lvl_number,
           all_data.prd_lvl_id
FROM  vw_product_backbone_att_prd_al all_data
    JOIN
        (SELECT   prd_prd_lvl_child,
                    atr_hdr_tech_key,
                    MIN(prd_lvl_id) AS prd_lvl_id
        FROM     vw_product_backbone_att_prd_al
        GROUP BY atr_hdr_tech_key,
                    prd_prd_lvl_child) lowest_level
    ON (all_data.prd_prd_lvl_child = lowest_level.prd_prd_lvl_child
    AND all_data.atr_hdr_tech_key = lowest_level.atr_hdr_tech_key
    AND all_data.prd_lvl_id = lowest_level.prd_lvl_id)

VW_PRODUCT_BACKBONE_ATT_PRD_AL
WITH hier AS
    (SELECT prd_lvl_child AS bas_prd_lvl_child,
            prd_lvl_child AS prd_prd_lvl_child,
            RTRIM(prd_lvl_number) AS prd_lvl_number
    FROM   prdmstee
    WHERE  prd_lvl_id = 1
    UNION
    SELECT plv.prd_lvl_parent AS bas_prd_lvl_child,
            plv.prd_lvl_child AS prd_prd_lvl_child,
            RTRIM(prd.prd_lvl_number) AS prd_lvl_number
    FROM   prdplvee plv
        JOIN prdmstee prd
        ON prd.prd_lvl_child = plv.prd_lvl_child
    WHERE  prd.prd_lvl_id = 1)
SELECT atp.atr_cod_tech_key,
    atp.prd_lvl_id,
    hier.prd_lvl_number,
    hier.bas_prd_lvl_child,
    hier.prd_prd_lvl_child,
    atp.atr_hdr_tech_key
FROM
basatpee atp
JOIN hier
ON atp.prd_lvl_child = hier.bas_prd_lvl_child

future promising
traditional dba role dying, publicly declared

database is up and running, backups are there, resource usage is under control,
data scients , data modelling, data analysis, value add what data is in the database and what value we can get out of it
how data can be accessed from different data sources.
jeep the lights on on the databases.intimate knowledge of datasources

hybrid role, traditional dba and developer role

good dba time, performance tuning, old scool traditional admin task.

I always ask question is this the best way? Are we going down a rabbit hole? doing lots of work unnecessarily.
You need someone who really understands the database technology.
I;ve seen people copy hundred lines of code from here and there, bom bom bom and it works. job done.

I've seen people writing code for apis, oracle supplied apis. read and learn and costantly be upto date. I am positioned well because I know so much already.

good developrs are lazy, I am telling these with good frame of mind. because they write less code, how can best umplement this solution. will bargain for do you need this?

How things work, rather than getting things work.

if you can ride your own bike, you can go anywhere you want without depending with anyone.

Line bubbling : You need to move x lines of code up and down. option + up arrow
opening and closing your sidebar : Command + b
Column Select :
    Box seletcion : Command + shift + mouse hold and drag, shift + option + command + arrow key
    add a cursor   : option + command + arrow
    Create cursors on all occurrences of a string : shift + cmd + l
Ragged line select :
Smart selection into lines : select a block of text and >> option + shift + i (Smart split into lines plugin)
Jump to Line : ctrl + G and line number
Git Commit :
Task Runner :

Default Keyboard Shortcuts, open QUICK Outline by pressing ⇧⌘O

#p1 {background-color: #ff0000;}   /* red */
#p2 {background-color: #00ff00;}   /* green */
#p3 {background-color: #0000ff;}   /* blue */

I am not in favour of putting anything in confleunce unless the things are concrete and complete.

JOB Name > Package name > Action it's doing
Troubleshooting Guides
How can

Load Testing

Despatch Job >
Cancel JOB >
REturn JOB >
W_IO_WEB_ORD_HDR
W_IO_WEB_ORD_ITEM

Order Event Publication : Trouble Shooting and diagnostics
This processes publishes all web order events
Failed to notify Order History Service/Order Payment Service about any order event after maximum retry.

Web Order Event Publication

Web order events like despatch, cancel, return are published to a stream.

Events are written to a staging tables in OMS.
Job runs periodically (every 15 minutes) and makes rest web service calls to post that to a stream.

https://riverisland.atlassian.net/wiki/spaces/CFT/pages/668368992/Processing+Order+Status+Events-+Dispatch+Cancel+Refund

https://riverisland.atlassian.net/wiki/spaces/SB/pages/573603841/UC4+Schedule+Request-CMS+OMS+WMS

omsvpc_c_publish_order_event
omsvpc_c_publish_order_event_stop
omsvpc_c_publish_order_event_2
omsvpc_c_publish_order_event_3
omsvpc_c_publish_order_event_3_check


SET SERVEROUTPUT ON
DECLARE
  l_v1 NUMBER   := 10;
  l_v2 VARCHAR2(10) := 'XYZ';
  l_v3 VARCHAR2(10) := 'TRUE';
  l_v4 BOOLEAN  := TRUE;
  l_v5 BOOLEAN  := NULL;
BEGIN

  APEX_JSON.initialize_clob_output;

    APEX_JSON.open_object; -- {
    APEX_JSON.write('l_v1', l_v1);
    APEX_JSON.write('l_v2', l_v2);
    APEX_JSON.write('l_v3', l_v3);
    APEX_JSON.write('l_v4', l_v4);
    APEX_JSON.write('l_v5', l_v5);
    APEX_JSON.open_object('metadata'); -- metadata {
        APEX_JSON.write('l_v5', l_v5);
    APEX_JSON.close_object; -- }
    APEX_JSON.close_object; -- }

  DBMS_OUTPUT.put_line(APEX_JSON.get_clob_output);
  APEX_JSON.free_output;
END;
/

Load testing Documentation

Scope of Improvement

Setting the Scene
Web order events like Despatch, Cancel and Return from OMS needs to be notified to external components. These events are notified by invoking a restfull service built and hosted in AWS by silver bullets. The rest full service then publish the event into a stream for consumption by the subscribers. This document outlines the steps performed to find out any early indicator of performance bottleneck.

Scope of this document to cover the components which picks the events from the stging table and invoke the restful service to post those events to "Order Notification Service".

Anticipated average Load
Based on last one months production events :
Maximum number of despatches per hour : 14293
Maximum number of Cancel/Returns per hour : 6709
Maximum number of all events per hour : 21002

All the following excercises are for posting 30K events and observing the elapsed time and resource consumption. These testing are performed from OMSDEV(RLOMSTD)

Stress Test scenarios

Excercise : 1

Number of events to be published is 30,000 (60% despatch, 20% cancel and 20% return)
Count of processed records in staging table W_IO_WEB_ORD_HDR : 50000
Count of processed records in staging table W_IO_WEB_ORD_ITEM : 50000

Outcome

Total elapsed time: 2503
CPU and Memory Usage of DB server : No significant increase in CPU and Memory consumption

Excercise : 2

Number of events to be published is 30,000 (60% despatch, 20% cancel and 20% return, and all orders are single item order)
Count of processed records in staging table W_IO_WEB_ORD_HDR : 1570002
Count of processed records in staging table W_IO_WEB_ORD_ITEM : 1570002

Outcome

Total elapsed time: 2386
CPU and Memory Usage of DB server : No significant increase in CPU and Memory consumption

Excercise : 3

Number of events to be published is 30,000 (60% despatch, 20% cancel and 20% return, and all orders are single item order)
Count of processed records in staging table W_IO_WEB_ORD_HDR : 1900005
Count of processed records in staging table W_IO_WEB_ORD_ITEM : 1900005

Outcome

Total elapsed time: 2409
CPU and Memory Usage of DB server : No significant increase in CPU and Memory consumption

Conclusion

Trim trailing whitespace cmd+k+x

select count(*) from orderalias; -- 32333883

select count(ORDERNUMBER) from orderheader; -- 32334008

10 Digit Order Numbers : 0032334008

46931365
-- 

Either we use 9999999999

9999900000 >> 9999910000 - 9999950000 >> unit testing and 9999950001 - 9999999999 Load testing

Option - 1 :
Unit Testing : 9999910000 - 9999950000
Load Testing : 9999950001 - 9999999999

e.g any Load Testing : -999999999 to -99989999 and any Unit Testing : -999900000 to -1

insert into orderalias
(
     clientcode         
    ,newmediaordernumber
    ,ordernumber        
    ,customerurn
    ,paymentindicator      
)
VALUES
(
    'RI'
    ,-999999999
    ,-999999999
    ,-999999999
    ,DECODE(MOD(-9999999999,3),1,'F',2,'T')
)

Guys can we use negative order numbers for unit and load testing? The reason I am thinking about this is this eliminates all risks of collision with actual order numbers in core system.

How many orders are there in order history at the moment? 
Do we have plan to populate large volume of orders in order history? Because all lookups need to query large data set to get a fair idea of performance. We have 46 million orders in OMS database.

The reason I am asking is we may need populate large volume of orders in order history. As all our lookups need to query large data set to get a fair idea of performance.

 Can we populate some million orders to have a 

Actually this will be ignored as these are marked as ***SilverBulletsDummyOrder***. Thst's fine our test code will create the corresponding entries for making the order event API call.

http://ords-alb.dev.transit.ri-tech.io/ords/cmsdev/api/dbobject/v1/prdmstee


SET SERVEROUTPUT ON;

CREATE TYPE db_object_rec_type AS OBJECT (
      object_name        varchar2(100),
      object_type        varchar2(100),
      created            varchar2(100),
      last_ddl_time      varchar2(100),
      status             varchar2(100)
);
/

show err;

CREATE TYPE db_object_tbl_type IS TABLE OF db_object_rec_type;
/

drop type db_object_rec_type;
drop type db_object_tbl_type;

create or replace package check_promotion
is
    
/*    type db_object_rec_type is record
    (
      object_name        user_objects.object_name%TYPE,
      object_type        user_objects.object_type%TYPE,
      created            user_objects.created%TYPE,
      last_ddl_time      user_objects.last_ddl_time%TYPE,
      status             user_objects.status%TYPE
    );

    type db_object_tbl_type is table of db_object_rec_type;
    
*/
    function f_get_object_status(
        i_object_name   in   user_objects.object_name%type
    )
    RETURN db_object_tbl_type PIPELINED;

end;
/

show err;

create or replace package body check_promotion
is
    function f_get_object_status(
        i_object_name         in   user_objects.object_name%type
    )
    return db_object_tbl_type pipelined
    is
        l_response_clob   clob;
    begin 

        l_response_clob := apex_web_service.make_rest_request(
            p_url          => 'http://ords-alb.dev.transit.ri-tech.io/ords/cmsdev/api/dbobject/v1/prdmstee',
            p_http_method  => 'GET');

        apex_json.parse(l_response_clob);

        for item_index in 1..apex_json.get_count(p_path => 'items')
        loop
            /*L_db_object_rec.object_name := 
                apex_json.get_varchar2(
                    p_path => 'items[%d].object_name',
                    p0     => item_index);
            L_db_object_rec.object_type :=
                apex_json.get_varchar2(
                    p_path => 'items[%d].object_type',
                    p0     => item_index);
            L_db_object_rec.status :=
                apex_json.get_varchar2(
                    p_path => 'items[%d].status',
                    p0     => item_index);
            L_db_object_rec.created :=
                apex_json.get_varchar2(
                    p_path => 'items[%d].created',
                    p0     => item_index);
            L_db_object_rec.last_ddl_time :=
                apex_json.get_varchar2(
                    p_path => 'items[%d].last_ddl_time',
                    p0     => item_index);*/
            
            pipe row (db_object_rec_type
            (
                apex_json.get_varchar2(
                    p_path => 'items[%d].object_name',
                    p0     => item_index),
                apex_json.get_varchar2(
                    p_path => 'items[%d].object_type',
                    p0     => item_index),
                apex_json.get_varchar2(
                    p_path => 'items[%d].status',
                    p0     => item_index),
                apex_json.get_varchar2(
                    p_path => 'items[%d].created',
                    p0     => item_index),
                apex_json.get_varchar2(
                    p_path => 'items[%d].last_ddl_time',
                    p0     => item_index)
            ));
        end loop;
    exception 
        when others then 
        dbms_output.put_line('Err='||sqlerrm);
    end f_get_object_status;
end check_promotion;
/

show err;

set serveroutput on;
select * from  table(check_promotion.f_get_object_status('prdmstee'));

{
items: [
        {
            owner: "JDA",
            object_name: "PRDMSTEE",
            object_type: "TABLE",
            created: "2014-09-05T10:22:08Z",
            last_ddl_time: "2018-03-07T16:04:35Z",
            status: "VALID"
        },
        {
            owner: "PUBLIC",
            object_name: "PRDMSTEE",
            object_type: "SYNONYM",
            created: "2014-09-05T10:50:18Z",
            last_ddl_time: "2014-09-05T10:50:18Z",
            status: "VALID"
        }
    ],
hasMore: false,
limit: 0,
offset: 0,
count: 2,
links: [
{
rel: "self",
href: "http://ords-alb.dev.transit.ri-tech.io/ords/cmsdev/api/dbobject/v1/prdmstee"
},
{
rel: "describedby",
href: "http://ords-alb.dev.transit.ri-tech.io/ords/cmsdev/api/metadata-catalog/dbobject/v1/item"
}
]
}

declare
    l_response_clob   clob;
    L_db_object_rec   db_object_rec_type;
begin 
    dbms_output.put_line('Start');

    l_response_clob := apex_web_service.make_rest_request(
        p_url          => 'http://ords-alb.dev.transit.ri-tech.io/ords/cmsdev/api/dbobject/v1/prdmstee',
        p_http_method  => 'GET');

    apex_json.parse(l_response_clob);
    for item_index in 1..apex_json.get_count(p_path => 'items')
    loop
        dbms_output.put_line(
            apex_json.get_varchar2(
                p_path => 'items[%d].object_name',
                p0     => item_index)
        );
    end loop;
end;
/

# Work account Default
Host github.com
   HostName github.com
   User git
   IdentityFile ~/.ssh/id_rsa
# Personal Account
Host github.com-sarojraut  
   HostName github.com
   User git
   IdentityFile ~/.ssh/personalgitid_rsa

ssh-add -D

ssh-add ~/.ssh/id_rsa

git remote add origin git@github-COMPANY:Company/testing.git
git push origin master

git remote add origin git@github-COMPANY:Company/testing.git
git push origin master

git clone git@github.com:sarojaraut/Practice.git

git remote remove origin
git remote add origin git@github.com-sarojraut:sarojaraut/Practice.git
git push --set-upstream origin master

Raise_Application_Error (-20343, 'The balance is too low.');




CG00000000570973