In MySQL, a database is a collection of objects that are used to store and manipulate data such as tables, database views, triggers, stored procedures, etc.

CREATE DATABASE [IF NOT EXISTS] database_name;
CREATE DATABASE classicmodels;
SHOW DATABASES;
USE database_name;
DROP DATABASE [IF EXISTS] database_name;

MySQL provides various storage engines for its tables as below:
   MyISAM
   InnoDB
   MERGE
   MEMORY (HEAP)
   ARCHIVE
   CSV
   FEDERATED

MyISAM : MyISAM extends the former ISAM storage engine. The MyISAM tables are optimized for compression an speed. Before MySQL version 5.5, MyISAM is the default storage engine when you create a table without explicitly specify the storage engine. From version 5.5, InnoDB as the default. MyISAM tables are not transaction-safe.

InnoDB : The InnoDB tables fully support ACID-compliant and transactions. They are also very optimal for performance. InnoDB table supports foreign keys, commit, rollback, roll-and forward operations.

MERGE : A MERGE table is a virtual table that combines multiple MyISAM tables,

Memory : The memory tables are stored in memory and used hash indexes so that they are faster than MyISAM tables. The lifetime of the data of the memory tables depends on the up time of the database server. The memory storage engine is formerly known as HEAP.

Archive : The archive storage engine allows you to store a large number of records, which for archiving purpose, into a compressed format to save disk space. The archive storage engine compresses a record when it is inserted and decompress it using zlib library as it is read. The archive tables only allow INSERT and SELECT commands. The archive tables do not support indexes, so reading records requires a full table scanning.

CSV : The CSV storage engine stores data in comma-separated values file format. A CSV table brings a convenient way to migrate data into non-SQL applications such as spreadsheet software. CSV table does not support NULL data type and read operation requires a full table scan.

FEDERATED : The FEDERATED storage engine allows you to manage data from a remote MySQL server without using cluster or replication technology. 

Numeric Data Types

Numeric Types : Description
TINYINT : A very small integer
SMALLINT : A small integer
MEDIUMINT : A medium-sized integer
INT : A standard integer
BIGINT : A large integer
DECIMAL : A fixed-point number
FLOAT : A single-precision floating-point number
DOUBLE : A double-precision floating-point number
BIT : A bit field

String Data Types

String Types : Description
CHAR : A fixed-length non-binary (character) string
VARCHAR : A variable-length non-binary string
BINARY : A fixed-length binary string
VARBINARY : A variable-length binary string
TINYBLOB : A very small BLOB (binary large object)
BLOB : A small BLOB
MEDIUMBLOB : A medium-sized BLOB
LONGBLOB : A large BLOB
TINYTEXT : A very small non-binary string
TEXT : A small non-binary string
MEDIUMTEXT : A medium-sized non-binary string
LONGTEXT : A large non-binary string
ENUM : An enumeration; each column value may be assigned one enumeration member
SET : A set; each column value may be assigned zero or more set members

Date and Time Types : Description
DATE : A date value in ‘CCYY-MM-DD’ format
TIME : A time value in ‘hh:mm:ss’ format
DATETIME : A date and time value in ‘CCYY-MM-DD hh:mm:ss’ format
TIMESTAMP : A timestamp value in ‘CCYY-MM-DD hh:mm:ss’ format
YEAR : A year value in CCYY or YY format


CREATE TABLE [IF NOT EXISTS] table_name( column_list ) engine=table_type
list of comma separated columns for the table in the column_list section >> column_name data_type[size] [NOT NULL|NULL] [DEFAULT value] [AUTO_INCREMENT]

CREATE TABLE IF NOT EXISTS tasks (
     task_id          int(11) NOT NULL AUTO_INCREMENT,  
     subject          varchar(45) DEFAULT NULL,  
     start_date       DATE DEFAULT NULL,  
     end_date         DATE DEFAULT NULL,  
     description      varchar(200) DEFAULT NULL,  
     PRIMARY KEY (task_id)
  ) ENGINE=InnoDB
  
To create a sequence in MySQL automatically, you set the AUTO_INCREMENT attribute to a column, which typically is primary key column. The following are rules that you must follow when you use AUTO_INCREMENT attribute:

Each table has only one AUTO_INCREMENT column whose data type is typically integer or float which is very rare.
The   AUTO_INCREMENT column must be indexed, which means it can be either PRIMARY KEY or UNIQUE index.
The AUTO_INCREMENT column must have NOT NULL constraint. When you set AUTO_INCREMENT attribute to a column, MySQL will make it NOT NULL for you in case you don’t define it explicitly.

CREATE TABLE employees( 
   emp_no       INT(4) AUTO_INCREMENT PRIMARY KEY, 
   first_name   VARCHAR(50), 
   last_name    VARCHAR(50)
)
ENGINE = INNODB; 

To obtain the last generated sequence number, you use the LAST_INSERT_ID() function.

If you insert a new row into a table and specify a value for the sequence column, MySQL will insert the sequence number if the sequence number does not exist in the column or issue an error if it already exists. If you insert a new value that is greater than the next sequence number, MySQL will use the new value as the starting sequence number and generate a unique sequence number greater than the current one for the next use. This creates gaps in the sequence.

If you use UPDATE statement to update an AUTO_INCREMENT column to a value that already exists, MySQL will issue a duplicate-key error if the column has a unique index. If you update an AUTO_INCREMENT column to a value that is larger than the existing values in the column, MySQL will use the next number of the last insert sequence number for the next row e.g., if the last insert sequence number is 3, you update it to 10, the sequence number for the new row is 4. See the example in the below section.


If you use DELETE statement to delete the last insert row, MySQL may or may not reuse the deleted sequence number depending on the storage engine of the table. A MyISAM table does not reuse the deleted sequence numbers if you delete a row e.g., the last insert id in the table is 10, if you remove it, MySQL still generates the next sequence number which is 11 for the new row. Similar to MyISAM tables, InnoDB tables do use reuse sequence number when rows are deleted.


Primary Key

CREATE TABLE users(
   user_id      INT AUTO_INCREMENT  PRIMARY KEY,   
   username     VARCHAR(40),   
   password     VARCHAR(255),   
   email        VARCHAR(255)
);

CREATE TABLE roles(   
role_id      INT AUTO_INCREMENT,   
role_name    VARCHAR(50),   
PRIMARY KEY(role_id)
);


CREATE TABLE userroles(   
user_id INT NOT NULL,   
role_id INT NOT NULL,   
PRIMARY KEY(user_id,role_id),   
FOREIGN KEY(user_id) REFERENCES users(user_id),   
FOREIGN KEY(role_id) REFERENCES roles(role_id)
);

ALTER TABLE table_name ADD PRIMARY KEY(primary_key_column);

A KEY is a synonym for INDEX. You use KEY when you want to create an index for a column or a set of column that is not a part of a primary key or unique key.

ALTER TABLE users ADD UNIQUE INDEX username_unique (username ASC) ;

Foreign Key

CONSTRAINT constraint_name FOREIGN KEY foreign_key_name (columns) REFERENCES parent_table(columns)ON DELETE action ON UPDATE action

ON DELETE CASCADE
ON DELETE SET NULL 
ON DELETE NO ACTION or ON DELETE RESTRICT action, MySQL will reject the deletion.
ALTER TABLE table_name DROP FOREIGN KEY constraint_name

SHOW CREATE TABLE products;

To disable foreign key checks, you use the following statement:
SET foreign_key_checks = 0 

And of course, you can enable it by using the statement below:
SET foreign_key_checks = 1 

Changing Table Structure Using MySQL ALTER TABLE

CREATE  TABLE tasks (  
   task_id          INT NOT NULL ,  
   subject          VARCHAR(45) NULL ,  
   start_date       DATE NULL ,  
   end_date         DATET NULL ,  
   description      VARCHAR(200) NULL ,  
   PRIMARY KEY (task_id) ,  
   UNIQUE INDEX task_id_UNIQUE (task_id ASC) 
);

ALTER TABLE tasksCHANGE COLUMN task_id task_id INT(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE tasks ADD COLUMN complete DECIMAL(2,1) NULL AFTER description;
ALTER TABLE tasks DROP COLUMN description;
ALTER TABLE tasks RENAME TO work_items;

MySQL DROP TABLE – Removing Existing Tables

DROP [TEMPORARY] TABLE [IF EXISTS] table_name [, table_name] ...[RESTRICT | CASCADE]

DROP TABLE statement only removes table and its data. However, it does not remove specific user privileges associated with the table. Therefore if a table with the same name is re-created after that, the existing privileges will apply to the new table, which may pose a security risk.

The RESTRICT and CASCADE flags are reserved for the future versions of MySQL. Last but not least, you must have DROP privileges for the table that you want to remove. -- oracle by default privileges dropped

DROP TABLE IF EXISTS tasks, nonexistent_table; -- oracle does not support mulit table drop

MySQL Temporary Table
A temporary table is created by using CREATE TEMPORARY TABLE statement.
MySQL drops the temporary table automatically when the session ends or connection is terminated.
A temporary table is only available and accessible by the client who creates the table.
A temporary table can have the same name as an existing table in a database. For example, if you create a temporary table named employees in the sample database, the existing employees table becomes inaccessible. Every query you issue against the employees table refers to the employees temporary table.

CREATE TEMPORARY TABLE top10customers
SELECT 
p.customerNumber,        
c.customerName,        
FORMAT(SUM(p.amount),2) total
FROM 
payments pINNER JOIN customers c 
ON c.customerNumber = p.customerNumber
GROUP BY p.customerNumber
ORDER BY total DESC
LIMIT 10

DROP TEMPORARY TABLE top10customers

MySQL Managing Database Index

CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name USING [BTREE | HASH | RTREE] ON table_name (column_name [(length)] [ASC | DESC],...)



Storage Engine : Allowable Index Types
MyISAM : BTREE, RTREE
InnoDB : BTREE
MEMORY/HEAP : HASH, BTREE
NDB : HASH

CREATE INDEX officeCode ON employees(officeCode)
DROP INDEX officeCode ON employees

Using MySQL SELECT Statement to Query Data

SELECT 
   column_1,
   column_2...
FROM 
   table_1[INNER | LEFT |RIGHT] JOIN table_2 
   ON conditions
WHERE conditions
GROUP BY group 
HAVING group_conditions
ORDER BY column_1 [ASC | DESC]
LIMIT offset, row_count

BETWEEN selects values within a range of values.
LIKE matches value based on pattern matching.
IN specifies if the value matches any value in a list.
IS NULL checks if the value is 

If a column has NULL values and you use the DISTINCT operator for that column, MySQL will keep one NULL 
You can use the DISTINCT operator with more than one column. The combination of all columns will be used to define the uniqueness of the row in the result set.

The DISTINCT operator is used with the COUNT function to count unique records in a table. In this case, it ignores the NULL values.

Using MySQL LIMIT

SELECT * FROM tbl LIMIT offset, count

The offset specifies the offset of the first row to return. The offset of the first row is 0, not 1.
The count specifies maximum number of rows to return.

When you use LIMIT with one argument, this argument will be used to specifies the maximum number of rows to return from the beginning of the result set.

SELECT customernumber,       customername,       creditlimit FROM customers LIMIT 10; -- first 10 rows

The LIMIT clause often used with ORDER BY clause

In operator - same as Oracle

SELECT officeCode, city, phone FROM offices WHERE country IN ('USA','France')

SELECT 
   orderNumber,       
   customerNumber,       
   status,       
   shippedDate
FROM orders 
WHERE 
   orderNumber IN ( 
      SELECT 
      orderNumber 
      FROM   
      orderDetails 
      GROUP BY orderNumber 
      HAVING SUM(quantityOrdered * priceEach) > 60000
      )

MySQL BETWEEN Operator Explained

SELECT productCode, productName, buyPrice FROM products WHERE buyPrice BETWEEN 90 AND 100

SELECT orderNumber,requiredDate,status 
FROM orders
WHERE requireddate BETWEEN CAST('2003-01-01' AS DATE) AND  CAST('2003-01-31' AS DATE)

Using MySQL LIKE Operator to Select Data Based On Patterns
MySQL provides two wildcard characters for using with the LIKE operator, the percentage % and underscore _.
The percentage ( %) wildcard allows you to match any string of zero or more characters.
The underscore ( _) wildcard allows you to match any single character.

SELECT productCode, productName FROM products WHERE productCode LIKE '%$_20%' ESCAPE '$' 
SELECT productCode, productName FROM products WHERE productCode LIKE '%\_20%'  --  the backslash character ‘ \‘ is the default escape character.

MySQL Alias
Both column alis and table alias are supported, same as Oracle here the quote character is ` instead of "

Combining Result Sets by Using MySQL UNION

SELECT column1, column2 UNION [DISTINCT | ALL] SELECT column1, column2 UNION [DISTINCT | ALL]  


MySQL INNER JOIN
SELECT 
   column_list
FROM t1 
   INNER JOIN t2 ON join_condition1
   INNER JOIN t3 ON join_condition2
   ...
WHERE where_conditions;

If you join multiple tables that have the same column name, you have to use table qualifier to refer to that column in the SELECT clause to avoid ambiguous column error.

MySQL LEFT JOIN -- Same as left outer join in oracle

The LEFT JOIN clause allows you to select rows from the both left and right tables that match, plus all rows from the left table ( T1) even there is no match found for them in the right table ( T2).

SELECT c.customerNumber,       c.customerName,       orderNumber,        o.statusFROM customers cLEFT JOIN orders o ON c.customerNumber = o.customerNumber

MySQL GROUP BY vs. ANSI SQL GROUP BY

MySQL follows ANSI SQL. However, MySQL gives you more flexibility when using the GROUP BY clause:
In ANSI SQL, you must list all columns that you use in the SELECT clause in the GROUP BY clause. MySQL does not have this restriction. MySQL allows you to have additional columns in the SELECT clause that are not specified in the GROUP BY clause.
MySQL also allows you to sort the group order in which the results are returned. The default order is ascending.

If you want to see the status and the number of orders in descending order, you can use the GROUP BY clause with DESC as the following query:
SELECT status, count(*)FROM orders GROUP BY status DESC;

SELECT 
   ordernumber,       
   sum(quantityOrdered) AS itemsCount,       
   sum(priceeach) AS total
FROM orderdetails
GROUP BY ordernumber
HAVING total > 1000 AND itemsCount > 600

The MySQL HAVING clause is often used with the GROUP BY clause. When using with the GROUP BY clause, you can apply a filter condition to the columns that appear in the GROUP BY clause. If the GROUP BY clause is omitted, the MySQL HAVING clause behaves like the WHERE clause. Notice that the MySQL HAVING clause applies the condition to each group of rows, while the WHERE clause applies the condition to each individual row.

MySQL Subquery - All supported like oracle: in, not in, exists, not exists. correlated sub query

Inserting Data into Tables Using MySQL INSERT Statement

INSERT INTO table(column1,column2...) VALUES (value1,value2,...)

In order to insert multiple rows into a table, you use the INSERT statement with the following syntax:

INSERT INTO table(column1,column2...)
VALUES (value1,value2,...),       
(value1,value2,...),... 
If you specify the values of the corresponding column for all columns in the table, you can ignore the column list in the INSERT statement.

INSERT INTO table_1 SELECT c1, c2, FROM table_2;
CREATE TABLE tasks_1 LIKE tasks;
INSERT INTO tasks_1 SELECT * FROM tasks;

MySQL INSERT  with ON DUPLICATE KEY UPDATE

If the new record that you want to insert may cause duplicate value in PRIMARY KEY or a UNIQUE index, MySQL will issue an error.  For example, if you execute the following statement
INSERT INTO tasks(task_id,subject,start_date,end_date,description)
VALUES (4,'Task 4','2010-01-01','2010-01-02','Description 4')
ON DUPLICATE KEY UPDATE task_id = task_id + 1;

Updating Data Using MySQL UPDATE Statement
UPDATE [LOW_ PRIORITY] [IGNORE] table_name [, table_name...]  SET column_name1 = expr1      [, column_name2=expr2 ...] [WHERE condition]

The LOW_PRIORITY keyword is used to delay the execution until no other connections read data from the table. It is used for controlling the update process in MySQL database server.

The IGNORE keyword is used to execute the update even there is an error occurred during the execution of the UPDATE statement. The error in the update process could be duplicate value on a unique column, the new value does not match with the column’s data type, etc.

MySQL UPDATE JOIN

UPDATE T1, T2,
[INNER JOIN | LEFT JOIN] T1 ON T1.C1 = T2. C1
SET T1.C2 = T2.C2,     
   T2.C3 = expr
WHERE condition 

First, you specify the main table ( T1) and the table that you want the main table to join to ( T2) after the UPDATE clause. Notice that you must specify at least one table after the UPDATE clause. The data in the table that is not specified after the UPDATE clause is not updated.
Second, you specify a kind of join you want to use i.e., either INNER JOIN or LEFT JOIN and a join condition. Notice that the JOIN clause must appear right after the UPDATE clause.
Third, you assign new values to the columns in T1 and/or T2 tables that you want to update.
Fourth, the condition in the WHERE clause allows you to limit the rows to update.

UPDATE T1, T2 SET T1.c2 = T2.c2,T2.c3 = expr WHERE T1.c1 = T2.c1 AND condition 

This UPDATE statement works the same as UPDATE JOIN with implicit INNER JOIN clause. It means you can rewrite the above statement as follows:

UPDATE T1,T2 INNER JOIN T2 ON T1.C1 = T2.C1 SET T1.C2 = T2.C2,      T2.C3 = expr WHERE condition 

----
CREATE DATABASE IF NOT EXISTS empdb; 
-- create tables
CREATE TABLE merits (  
  performance INT(11) NOT NULL,
  percentage FLOAT NOT NULL,
  PRIMARY KEY (performance)
  ); 
  CREATE TABLE employees (
  emp_id INT(11) NOT NULL AUTO_INCREMENT,
  emp_name VARCHAR(255) NOT NULL,
  performance INT(11) DEFAULT NULL,
  salary FLOAT DEFAULT NULL,
  PRIMARY KEY (emp_id),
  CONSTRAINT fk_performance  FOREIGN KEY(performance)   REFERENCES merits(performance)
  );
  -- insert data for merits table
  INSERT INTO merits(performance,percentage)
  VALUES(
  1,0),
  (2,0.01),
  (3,0.03),
  (4,0.05),
  (5,0.08);
  -- insert data for employees table
  INSERT INTO employees(emp_name,performance,salary)
  VALUES(
  'Mary Doe', 1, 50000),
  ('Cindy Smith', 3, 65000),
  ('Sue Greenspan', 4, 75000),
  ('Grace Dell', 5, 125000),
  ('Nancy Johnson', 3, 85000),
  ('John Doe', 2, 45000),
  ('Lily Bush', 3, 55000);

UPDATE employees
INNER JOIN merits ON employees.performance = merits.performance
SET salary = salary + salary * percentage

Using MySQL DELETE to Remove Data from Tables

DELETE FROM table   [WHERE conditions] [ORDER BY ...] [LIMIT rows]

MySQL delete from multiple tables

To delete records from multiple tables, you use one of the following DELETE statements:

DELETE table_1, table_2,...
FROM table-refs   
[WHERE conditions] 

DELETE FROM table_1, table_2,...
USING table-refs
[WHERE conditions] 

Let’s take a look at the offices and employees
Suppose one office is closed and you want to remove all employee records in the employees table associated with that office and also the office itself in the offices table, you can use the second form of the MySQL DELETE statement

DELETE employees,     offices 
FROM employees,  offices 
WHERE 
   employees.officeCode = offices.officeCode  
   AND offices.officeCode = 1

   SELECT * FROM employees WHERE officeCode = 1; 
   SELECT * FROM officesWHERE officeCode = 1;
   
You can achieve the same effect by using the second form of the MySQL DELETE statement as follows:

DELETE FROM employees, offices 
USING employees, offices 
WHERE employees.officeCode = offices.officeCode  AND
       offices.officeCode = 1 

MySQL DELETE JOIN

DELETE T1, T2
FROM T1INNER JOIN T2 ON T1.key = T2.key
WHERE condition

SELECT * FROM offices WHERE officeCode = 5
SELECT * FROM employees WHERE officeCode = 5

DELETE offices, employees 
FROM offices
INNER JOIN employees
       ON employees.officeCode = employees.officeCode
WHERE offices.officeCode = 5 

You can use DELETE statement with LEFT JOIN clause to clean up our customers master data. The following statement removes customers who do not have any order:

DELETE customers
FROM customers
LEFT JOIN orders ON customers.customerNumber = orders.customerNumber
WHERE orderNumber IS NULL;

Now, if we query customers who have not ordered any product by using the following SELECT LEFT JOIN query:

SELECT c.customerNumber,
          c.customerName,
          orderNumber
FROM customers c
LEFT JOIN orders o ON c.customerNumber = o.customerNumber
WHERE orderNumber IS NULL; 

You will not see any row returned. It means you have successfully deleted customers who have not ordered any products.

MySQL TRUNCATE TABLE

TRUNCATE TABLE table_name
If the table does not have any foreign key constraint, the TRUNCATE TABLE statement drops the table and recreates a new empty one with the same definition, which is faster and more efficient than using the DELETE statement especially for big tables.
If the table has any foreign key constraint, the TRUNCATE TABLE statement deletes rows one by one. If the foreign key constraint has DELETE CASCADE action, the corresponding rows in the child tables are also deleted. else it will stop and issue an error when it encounters a row that is referenced by a row in a child table.

Notice that the TRUNCATE TABLE statement resets auto increment value to 0 if the table has an AUTO_INCREMENT column.

MySQL Replace
The MySQL REPLACE statement works like the INSERT statement with the additional rules:
If the record which you want to insert does not exist, the MySQL REPLACE inserts a new record.
If the record which you want to insert already exists, MySQL REPLACE deletes the old record first and then insert a new record.

REPLACE INTO table_name(column_name1,column_name2,…) VALUES(value1,value2,…)

REPLACE INTO offices(officecode,city)VALUES(8,'San Jose')

MySQL Transaction

To write the changes into the database within a transaction you use the COMMIT statement. It is important to note that MySQL automatically commit the changes to the database by default. To force MySQL not to commit changes automatically, you need to use the following statement:

SET autocommit = 0;

-- start a new transaction
start transaction; 
-- get latest order number
select @orderNumber := max(orderNUmber) from orders;

-- set new order number
set @orderNumber = @orderNumber  + 1; 

-- insert a new order for customer 145
insert into orders(orderNumber,
                   orderDate,
                   requiredDate,
                   shippedDate,
                   status,
                   customerNumber)
values(@orderNumber,
       now(),
       date_add(now(), INTERVAL 5 DAY),
       date_add(now(), INTERVAL 2 DAY),
       'In Process',
       145);
-- insert 2 order line items
insert into orderdetails(orderNumber,
                         productCode,
                         quantityOrdered,
                         priceEach,
                         orderLineNumber)
values(@orderNumber,'S18_1749', 30, '136', 1),
 (@orderNumber,'S18_2248', 50, '55.09', 2); 
 -- commit changes
 commit;        
 -- get the new inserted order
 
select * from orders a inner join orderdetails b on a.ordernumber = b.ordernumberwhere a.ordernumber = @ordernumber;

DELIMITER // 
CREATE PROCEDURE GetAllProducts()
BEGIN
SELECT *  FROM products;
END // 
DELIMITER ; 
 
 Let’s examine the stored procedure in greater detail:
The first command is DELIMITER //, which is not related to the stored procedure syntax. 
The DELIMITER statement changes the standard delimiter which is semicolon ( ;) to another. In this case, the delimiter is changed from the semicolon( ;) to double-slashes //. 
Why do we have to change the delimiter? Because we want to pass the  stored procedure to the server as a whole rather than letting mysql tool to interpret each statement at a time.  Following the END keyword, we use the delimiter // to indicate the end of the stored procedure. The last command ( DELIMITER;) changes the delimiter back to the standard one.
We use the CREATE PROCEDURE statement to create a new stored procedure. We specify the name of stored procedure after the CREATE PROCEDURE statement. In this case, the name of the stored procedure is GetAllProducts. We put the parentheses after the name of the stored procedure.
 
The section between BEGIN and END is called the body of the stored procedure. You put the declarative SQL statements in the body to handle business logic. In this stored procedure, we use a simple SELECT statement to query data from the products table.

In order to call a stored procedure, you use the following SQL command:

CALL GetAllProducts();

MySQL Stored Procedure Variables
DECLARE variable_name datatype(size) DEFAULT default_value;

DECLARE x, y INT DEFAULT 0

DECLARE total_count INT DEFAULT 0
SET total_count = 10;

DECLARE total_products INT DEFAULT 0 
SELECT COUNT(*) INTO total_products FROM products

Variable will be out of scope when the END statement of stored procedure reached.
A variable that begins with the @ sign at the beginning is session variable. It is available and accessible until the session ends.

MySQL Stored Procedure Parameters



 
http://www.mysqltutorial.org/basic-mysql-tutorial.aspx

