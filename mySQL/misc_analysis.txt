First, create the user mysql (note that the first forward slash symbol (/) stands by itself
on the line):
$ sudo niutil -create / /users/mysql
and assign invalid (and therefore relatively secure) values for the home directory and
login shell:
$ sudo niutil -createprop / /users/mysql home /var/empty
$ sudo niutil -createprop / /users/mysql shell /usr/bin/false
Next, create the group mysql:
$ sudo niutil -create / /groups/mysql

Verifying that the mysql group exists

$ sudo niutil -createprop / /groups/mysql gid 74
$ sudo niutil -createprop / /users/mysql uid 74
Finally, associate the mysql user with the mysql group:
$ sudo niutil -createprop / /users/mysql gid 74

$mysql \
--host=server_host_name \
--port=server_port \
--user=root \
--password=the_mysql_root_password

SELECT VERSION();

SHOW DATABASES;

SHOW COLUMNS FROM artist;

INSERT INTO artist VALUES (7, "Barry Adamson");

You might be tempted to try out something like this:
mysql> INSERT INTO artist
VALUES((SELECT 1+MAX(artist_id) FROM artist), "Barry Adamson");
However, this won’t work because you can’t modify a table while you’re reading from
it.

This works in 5.7.2 : insert into t1 select * from t1;

insert into t1 values (8), (9);

SELECT * FROM t1 ORDER BY c1 DESC LIMIT 1;

TRUNCATE TABLE played;

UPDATE artist SET artist_name = UPPER(artist_name);

UPDATE played SET played = NULL ORDER BY played DESC LIMIT 10;

SHOW DATABASES LIKE "m%";

SHOW CREATE DATABASE music;

SHOW TABLES FROM music;

SHOW TABLES;

mysqlshow --user=root --password=the_mysql_root_password music track

mysql> USE lucy;
Database changed

CREATE DATABASE IF NOT EXISTS lucy;

mysql> CREATE TABLE artist (
-> artist_id SMALLINT(5) NOT NULL DEFAULT 0,
-> artist_name CHAR(128) DEFAULT NULL,
-> PRIMARY KEY (artist_id)
-> );

INSERT INTO artist SET artist_name = "Duran Duran";

Column names have fewer restrictions than database and table names. What’s more,
they’re not dependent on the operating system: the names are case-insensitive and
portable across all platforms. All characters are allowed in column names, though if
you want terminate them with whitespace or include periods (or other special characters
such as the semicolon), you’ll need to enclose the name with a backtick symbol
(`) on either side.

SHOW CHARACTER SET;

SHOW COLLATION;

CREATE DATABASE rose DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_cs;

CREATE TABLE IF NOT EXISTS artist (
-> artist_id SMALLINT(5) NOT NULL DEFAULT 0,
-> artist_name CHAR(128) DEFAULT NULL,
-> PRIMARY KEY (artist_id)
-> );

Query OK, 0 rows affected (0.00 sec)

It’s actually hard to tell success from failure here: zero rows are affected whether or not
the table exists, and no warning is reported when the table does exist.

My assumption/theory to explain this scenario is : items got cancelled after despatch and before collected

50579654, 50522044, 50029870, 51093233

CREATE DATABASE d1;
USE d1;
CREATE TABLE t1 (c1 INT);
CREATE TABLE t2 (c1 INT);
CREATE FUNCTION f1(p1 INT) RETURNS INT
  BEGIN
    INSERT INTO t2 VALUES (p1);
    RETURN p1;
  END;

Mysql-5
docker run --name mysqldb -e MYSQL_ROOT_PASSWORD=mysql -d mysql

mysql-8
docker run --name mysqldb8013 -e MYSQL_ROOT_PASSWORD=temppass -d mysql:8.0.13

mysql -h localhost -ptemppass -u root

CREATE USER 'sampadm'@'localhost' IDENTIFIED BY 'sampadm';
GRANT ALL ON sampdb.* TO 'sampadm'@'localhost';

mysql -h localhost -psampadm -u sampadm sampdb

SELECT NOW();
SELECT NOW()\g -- antoher way of terminating statement without ;

SELECT NOW(), USER(), VERSION(), database();

output on three separate lines
SELECT NOW();SELECT USER();SELECT VERSION();

SHOW TABLES;

SHOW DATABASES;



mysql < myscript.sql

CREATE DATABASE sampdb;
USE sampdb;
SELECT DATABASE();

--without sampdb select database show null

mysql sampdb < create_president.sql

CREATE TABLE president
(
  last_name VARCHAR(15) NOT NULL,
  first_name VARCHAR(15) NOT NULL,
  suffix VARCHAR(5) NULL,
  city VARCHAR(20) NOT NULL,
  state VARCHAR(2) NOT NULL,
  birth DATE NOT NULL,
  death DATE NULL
);

The following statements all are synonymous:
DESCRIBE president;
DESC president;
EXPLAIN president;
SHOW COLUMNS FROM president;
SHOW FIELDS FROM president;

CREATE TABLE member
(
  member_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    PRIMARY KEY (member_id),
  last_name VARCHAR(20) NOT NULL,
  first_name VARCHAR(20) NOT NULL,
  suffix VARCHAR(5) NULL,
  expiration DATE NULL,
  email VARCHAR(100) NULL,
  street VARCHAR(50) NULL,
  city VARCHAR(50) NULL,
  state VARCHAR(2) NULL,
  zip VARCHAR(10) NULL,
  phone VARCHAR(20) NULL,
  interests VARCHAR(255) NULL
);

CREATE TABLE student
(
name VARCHAR(20) NOT NULL,
sex ENUM('F','M') NOT NULL,
student_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
PRIMARY KEY (student_id)
) ENGINE = InnoDB;

DESCRIBE student 'sex';

If you omit the ENGINE clause, MySQL picks a default engine, which usually is MyISAM.“ISAM” stands for “indexed sequential access method,” and the MyISAM engine is based on that access method with some MySQL-specific stuff added.

CREATE TABLE grade_event
(
date DATE NOT NULL,
category ENUM('T','Q') NOT NULL,
event_id INT UNSIGNED NOT NULL AUTO_INCREMENT,
PRIMARY KEY (event_id)
) ENGINE = InnoDB;

CREATE TABLE score
(
student_id INT UNSIGNED NOT NULL,
event_id INT UNSIGNED NOT NULL,
score INT NOT NULL,
PRIMARY KEY (event_id, student_id),
INDEX (student_id),
FOREIGN KEY (event_id) REFERENCES grade_event (event_id),
FOREIGN KEY (student_id) REFERENCES student (student_id)
) ENGINE = InnoDB;

INSERT INTO student VALUES('Kyle','M',NULL);
INSERT INTO grade_event VALUES('2008-09-03','Q',NULL);

You can quote string and date values in MySQL using either single or double quotes, but single quotes are more standard.

mysql> source insert_president.sql;
If you have the rows stored in a file as raw data values rather than as INSERT statements, you can load them with the LOAD DATA statement or with the mysqlimport client program.
mysql> LOAD DATA LOCAL INFILE 'member.txt' INTO TABLE member;

By default, the LOAD DATA statement assumes that column values are separated by tabs and that lines end with newlines (also known as “linefeeds”). The keyword LOCAL in the LOAD DATA statement causes the data file to be read by the client program (in this case mysql) and sent to the server to be loaded.

SELECT last_name, first_name FROM president WHERE death IS NULL;
SELECT last_name, first_name FROM president ORDER BY last_name;
SELECT last_name, first_name FROM president ORDER BY last_name DESC;
SELECT last_name, first_name, death FROM president ORDER BY IF(death IS NULL,0,1), death DESC;
SELECT last_name, first_name, birth FROM president ORDER BY birth LIMIT 5;
The following query is similar to the previous one but returns 5 rows after skipping the first 10:
mysql> SELECT last_name, first_name, birth FROM president ORDER BY birth DESC LIMIT 10, 5;
To pull a randomly selected row or set of rows from a table, use ORDER BY RAND() in conjunction with LIMIT:
mysql> SELECT last_name, first_name FROM president ORDER BY RAND() LIMIT 1;
mysql> SELECT CONCAT(first_name,' ',last_name),CONCAT(city,', ',state) FROM president;
mysql> SELECT CONCAT(first_name,' ',last_name) AS Name, CONCAT(city,', ',state) AS Birthplace FROM president;

The principal thing to keep in mind when using dates in MySQL is that it always expects dates with the year first.To write July 27, 2008, use '2008-07-27'.

SELECT * FROM grade_event WHERE date = '2008-10-01';
SELECT last_name, first_name, birth FROM president WHERE MONTH(birth) = 3;
SELECT last_name, first_name, birth FROM president WHERE MONTHNAME(birth) = 'March';
SELECT last_name, first_name, birth FROM president WHERE MONTH(birth) = 3 AND DAYOFMONTH(birth) = 29;
SELECT last_name, first_name, birth FROM president WHERE MONTH(birth) = MONTH(CURDATE()) AND DAYOFMONTH(birth) = DAYOFMONTH(CURDATE());

SELECT last_name, first_name, birth, death, TIMESTAMPDIFF(YEAR, birth, death) AS age FROM president WHERE death IS NOT NULL ORDER BY age DESC LIMIT 5;

The TIMESTAMPDIFF() function is useful here because it takes an argument for specifying the unit in which to express the result (YEAR in this case):

SELECT last_name, first_name, expiration FROM member WHERE (TO_DAYS(expiration) - TO_DAYS(CURDATE())) < 60;

The equivalent statement using TIMESTAMPDIFF() looks like this:

SELECT last_name, first_name, expiration FROM member WHERE TIMESTAMPDIFF(DAY, CURDATE(), expiration) < 60;

To calculate one date from another, you can use DATE_ADD() or DATE_SUB().These functions take a date and an interval and produce a new date. For example:
mysql> SELECT DATE_ADD('1970-1-1', INTERVAL 10 YEAR);
mysql> SELECT DATE_SUB('1970-1-1', INTERVAL 10 YEAR);
SELECT last_name, first_name, expiration FROM member WHERE expiration < DATE_ADD(CURDATE(), INTERVAL 60 DAY);

SELECT last_name, first_name, last_visit FROM patient WHERE last_visit < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);

SELECT last_name, first_name FROM president WHERE last_name LIKE 'W%';

This pattern matches last names that contain exactly four characters:
mysql> SELECT last_name, first_name FROM president WHERE last_name LIKE '____';

MySQL enables you to define your own variables.These can be set using query results, User variables are named using @var_name syntax and assigned a value in a SELECT statement using an expression of the form @var_name: = value.
SELECT @birth := birth FROM president WHERE last_name = 'Jackson' AND first_name = 'Andrew';
SELECT last_name, first_name, birth FROM president WHERE birth < @birth ORDER BY birth;

Variables also can be assigned using a SET statement. In this case, either = or := are allowable as the assignment operator:
mysql> SET @today = CURDATE();
mysql> SET @one_week_ago := DATE_SUB(@today, INTERVAL 7 DAY);
mysql> SELECT @today, @one_week_ago;


SELECT DISTINCT state FROM president ORDER BY state;
SELECT COUNT(*) FROM grade_event WHERE category = 'Q';
COUNT(*) counts every row selected. By contrast, COUNT(col_name) counts only non-NULL values.
SELECT COUNT(DISTINCT state) FROM president;
SELECT state, COUNT(*) FROM president GROUP BY state;
SELECT state, COUNT(*) FROM president GROUP BY state ORDER BY 2 DESC;
SELECT sex, COUNT(*) FROM student GROUP BY sex WITH ROLLUP;

mysql> SELECT
-> student.name, grade_event.date, score.score, grade_event.category
-> FROM grade_event INNER JOIN score INNER JOIN student
-> ON grade_event.event_id = score.event_id
-> AND score.student_id = student.student_id
-> WHERE grade_event.date = '2008-09-23';


mysql> SELECT student.student_id, student.name,
-> COUNT(absence.date) AS absences
-> FROM student LEFT JOIN absence
-> ON student.student_id = absence.student_id
-> GROUP BY student.student_id;

mysql> SELECT p1.last_name, p1.first_name, p1.city, p1.state
-> FROM president AS p1 INNER JOIN president AS p2
-> ON p1.city = p2.city AND p1.state = p2.state
-> WHERE (p1.last_name <> p2.last_name OR p1.first_name <> p2.first_name)
-> ORDER BY state, city, last_name;

mysql> SELECT * FROM student
-> WHERE student_id NOT IN (SELECT student_id FROM absence);

DELETE FROM president WHERE state='OH';

mysql> UPDATE member
-> SET expiration='2009-7-20'
-> WHERE last_name='York' AND first_name='Jerome';

Under Unix, you set up an option file by creating a file named ~/.my.cnf (that is, a file named .my.cnf in your home directory). Under Windows, create an option file named my.ini in your MySQL installation directory, or in the root directory of the C drive (that is, C:\my.ini).

[client]
host=server_host
user=your_name
password=your_pass

% chmod 600 .my.cnf
% chmod u=rw,go-rwx .my.cnf

--sql-mode="TRADITIONAL"
--sql-mode="ANSI_QUOTES,PIPES_AS_CONCAT"

Any client can set its own session-specific SQL mode:
SET sql_mode = 'TRADITIONAL';
To set the SQL mode globally, add the GLOBAL keyword:
SET GLOBAL sql_mode = 'TRADITIONAL';
