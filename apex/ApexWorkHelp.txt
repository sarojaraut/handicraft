Sidhamula:Jul07
IG Validation
Custom Attributes of NAME column : pattern="^[-A-Z a-z']*$" data-valid-message="Name is required and must not contain special characters or numbers"


To prevent users from posting blank rows, under Client-side Condition, we need to set type as Javascript expression.

apex.item('P1_FILE_BLOB').value.length>0 ||
apex.item('P1_POST_COMMENT').value.length>0

apex_util.get_since(p.created) post_date,

$(this.triggeringElement).val() -- Dynamic acction on a  field

$('#id') : Jquery selector

Add a click event handler
$('img').on('click', function() {
  console.log('You clicked an image!');
});

$('#P1_SEARCH').attr('disabled', 'disabled');
$('#P1_SEARCH').removeAttr('disabled');

$('#dashboard-reg').hide();
$('#dashboard-reg').show();

$('.t-NavigationBar').children().eq(1).addClass('icon-only');
$('.t-NavigationBar').children().eq(1).removeClass('icon-only');

// Update Badge Text
apex.jQuery(".js-shopping-cart-item .t-Button-badge").text(this.data.P18_SHOPPING_CART_ITEMS);

// Update Icon
apex.jQuery(".js-shopping-cart-item .t-Icon").removeClass('fa-cart-empty').addClass('fa-cart-full');



For Target > URL, enter #action$like?id=&ID.
Target > URL: #action$delete?id=&ID.

We need this Page Item P1_ACTION_ID to be on the page so that this javascript can store the particular CARD ID when a user clicks either buttons, which in turn, will execute either the like or the delete operations from the URL link targets.


apex.actions.add([{
    name: "like",
    action: (event, element, args) => {
        apex.items.P1_ACTION_ID.value = args.id;
        apex.event.trigger(document, 'action-like');
        }
    }, {
    name: "delete",
    action: (event, element, args) => {
        apex.items.P1_ACTION_ID.value = args.id;
        apex.event.trigger(document, 'action-delete');
        }
    }]);



VAlidate Sal dynamic action :

Execute JS
var sal = apex.item("cSal"),
    num = sal.getValue();
if ( num !== "" && (parseFloat(num) != num || num < 0 || num > 10000)) {
    sal.node.setCustomValidity("invalid number"); // this message is only shown if there is no data-valid-message attribute on the column item
} else {
    sal.node.setCustomValidity(""); // clear the error
}

And set custom Attribute : data-valid-message="Salary must be a valid number between 0 and 10000."

IG we can column level validation as well as entiree grid level validation

HTML : A markup language the browser understands to render the page
DOM : You can think of DOM as the in memory object representation of the HTML (DOM Tree) and APIs(set of methods) to work with and alter the DOM tree

https://youmightnotneedjquery.com/
shows the native DOM apis for a JQUERY expression

ID : $('#message')
class : $('.boring')
element : $('ul')
Multi Seletcor : $(.fun #message)

https://oracle.github.io/learning-library/developer-library/apex/intro-to-javascript/?lab=3-working-with-the-dom-and-jquery

I still think jquery are easier to use than native DOM APIs

oracle cloud optimiser hints that can be used in apex apps to choose the best service : apex-adb-high, apex-adb-medium, apex-adb-low

Interactive grid Dynamic action
------------------------------------
var view = apex.region("RuleQualification").widget().interactiveGrid("getViews", "grid");
var records = view.getSelectedRecords();
// console.log(records);
// console.log((records[0][3].v));
$s("P15_SELECTED_QUAL_ID",records[0][3].v);
//difference between input type and object like LOV
// for ( i = 0; i < records.length; i++) {
//     //if dealing with LOV for example
//     console.log(view.model.getValue(records[i], "DOC_REFERENCE").v);

//     //if dealing with regular text type for example
//     // console.log(view.model.getValue(records[i], "rule_id"));
// }

--------------------------------

https://www.svgbackgrounds.com/#spectrum-gradient


declare
    l_context apex_exec.t_context;
    l_emailsidx  pls_integer;
    l_namesids    pls_integer;
    l_region_id number;
begin
    -- Get the region id for the CUSTOMERS IR region
    select region_id
      into l_region_id
      from apex_application_page_regions
     where application_id = :APP_ID
       and page_id        = 1
       and static_id      = 'CUSTOMERS';

    -- Get the query context for the CUSTOMERS IR Region
    -- Documentation: https://docs.oracle.com/en/database/oracle/application-express/19.2/aeapi/OPEN_QUERY_CONTEXT-Function.html
    l_context := apex_region.open_query_context (
                        p_page_id => 1,
                        p_region_id => l_region_id );
    -- Get the column positions for EMAIL and NAME columns
    l_emailsidx := apex_exec.get_column_position( l_context, 'EMAIL' );
    l_namesids := apex_exec.get_column_position( l_context, 'NAME' );

    -- Loop throught the query of the context
    while apex_exec.next_row( l_context ) loop
        apex_mail.send (
        p_to                 => apex_exec.get_varchar2( l_context, l_emailsidx ),
        p_template_static_id => 'NEW_YEAR_2020_PROMOTION_DUBAI_BRANCH',
        p_placeholders       => '{' ||
        '    "CUSTOMER":'            || apex_json.stringify( apex_exec.get_varchar2( l_context, l_namesids )) ||
        '   ,"START_DATE":'          || apex_json.stringify( :P2_START_DATE ) ||
        '   ,"END_DATE":'            || apex_json.stringify( :P2_END_DATE ) ||
        '   ,"LOCATION":'            || apex_json.stringify( :P2_LOCATION ) ||
        '   ,"NOTES":'               || apex_json.stringify( :P2_NOTES ) ||
        '   ,"ITEMS":'               || apex_json.stringify( :P2_ITEMS ) ||
        '   ,"MY_APPLICATION_LINK":' || apex_json.stringify( apex_mail.get_instance_url || apex_page.get_url( 1 )) ||
        '}' );
     end loop;

     apex_exec.close( l_context );
exception
     when others then
         apex_exec.close( l_context );
     raise;
end;


Text to display for the blob download column in a report
<span title="Download #FILE_NAME# #FILE_SIZE#" aria-hidden="true" class="fa fa-download-alt fam-ellipsis-h fam-is-success fa-lg"></span>


select
    replace(t.name,'Err at ','') name,
    case
        when t.name = 'Data Error'
            then 'Fix the following errors before re-try'
        else t.val
    end                           value,
    case
        when name like 'Err at Line%'
            then 'color:#e91e63; font-style:italic; text-align:center;'
        when name like '**Error Records%' or t.name = 'Data Error'
            then 'color:#ff1744; font-weight:bold; text-align:center;'
        when t.name in( 'Ignoring worksheet' ,'Delete count')
            then 'color:#ef6c00; font-weight:italic; text-align:center;'
        when t.name in ('Export count','Insert count')
            then 'color:#43a047; font-weight:bold; text-align:center;'
        else null
    end name_style,
    case
        when name like 'Err at Line%'                         then 'color:#e91e63; font-style:italic;'
        when name like '**Error Records%'                     then 'color:#ff1744; font-style:italic; text-align:center;'
        when t.name = 'Data Error'                            then 'color:#ff1744; font-weight:bold; text-align:center;'
        when t.name in ('Ignoring worksheet','Delete count')  then 'color:#ef6c00; font-weight:italic; text-align:center;'
        when t.name in ('Export count','Insert count')        then 'color:#43a047; font-weight:bold; text-align:center;'
        else null
    end val_style
from ref_data_activity_log ,
    json_table(
        extra_info
        ,'$.info[*]'
        columns(
            name    varchar2(4000) path '$.name'
            ,val    varchar2(4000) path '$.val'
        )
    ) t
where id = :P33_ID;

<span style="#NAME_STYLE#">#NAME#</span>
<span style="#VAL_STYLE#">#VALUE#</span>

-- Submitting disabled items to session state
Disabled items are not submitted to page session in apex and sometimes you may need to disable some items to stop end users from changing the value but want to submit the value to session state
-- Create a dynamic action on event before page submit and execute java script = $(':disabled').removeAttr('disabled');

Bulk operations

How can you make sure each ambassaddor has got a feel of one success, one failure and one tough calls

--- Manual Form proccessing

begin
    logger.log(':request = '||:request);
    case :request
        when 'CREATE' then
            insert into clr_course_dept values(:p23_ucas_code, :p23_dept_id);
            -- Copy the email rules from the hot course of the new deparment (Hot course is the least recently updated course)
            clearing_admin.p_copy_course_email_rules(clearing_admin.f_get_least_recently_updated_course(:p23_dept_id,:p23_ucas_code),:p23_ucas_code);
            clearing_admin.p_copy_course_subjects(clearing_admin.f_get_least_recently_updated_course(:p23_dept_id,:p23_ucas_code),:p23_ucas_code);
            --apex_application.g_print_success_message := '<span style="color:green">Course linked to department</span>';
            apex_application.g_print_success_message := 'Course linked to department '||:p23_dept_id||' and email rules and course subjects cloned from the most recently updated course of this department';
        when 'SAVE' then
            -- Most likely course has been linked to a new department
            -- so need cleanup of old settings and load fresh
            -- We could have done another check to ensure dept id is really changed
            -- but considering it will be rarely used simpler solution of
            -- cleanup and  load-fresh is adopted
            -- First delete the email rules and course subject setings
            delete from clr_email where ucas_code=:p23_ucas_code;
            delete from clr_course_subject where ucas_code=:p23_ucas_code;
            update clr_course_dept set dept_id= :p23_dept_id where ucas_code=:p23_ucas_code;
            -- Copy the email rules from the hot course of the new deparment
            clearing_admin.p_copy_course_email_rules(clearing_admin.f_get_least_recently_updated_course(:p23_dept_id,:p23_ucas_code),:p23_ucas_code);
            clearing_admin.p_copy_course_subjects(clearing_admin.f_get_least_recently_updated_course(:p23_dept_id,:p23_ucas_code),:p23_ucas_code);
            apex_application.g_print_success_message := 'Course unlinked from old dept, linked to new dept, email rules and course subjects cloned from the most recently updated course of the new department';
        when 'DELETE' then
            -- First delete the email rules and course subject setings
            delete from clr_email where ucas_code=:p23_ucas_code;
            delete from clr_course_subject where ucas_code=:p23_ucas_code;
            -- delete the course dept link
            delete from clr_course_dept where ucas_code=:p23_ucas_code and  dept_id= :p23_dept_id;
            apex_application.g_print_success_message := 'Course un-linked';
    end case;
exception
    when others then
        logger.log_error('Error during page processing '||:APP_PAGE_ID);
        apex_application.g_print_success_message := '<span style="color:red">Failure processing request, try again after some time or contact your administrator</span>';
end;

begin
    logger.log(':request = '||:request);
    case :request
        when 'CREATE' then
            insert into clr_course_dept(:P23_UCAS_CODE, :P23_DEPT_ID);
        when 'SAVE' then
            update clr_course_dept set dept_id= :P23_DEPT_ID;
        when 'DELETE' then
            delete from clr_course_dept where ucas_code=:P23_UCAS_CODE and  dept_id= :P23_DEPT_ID;
    end;
end;

declare
    l_parameters apex_exec.t_parameters;
begin

    -- add the primary key value as the "id" parameter; this will be appended to the URL for DELETE and APPLY_CHANGES
    if :REQUEST in ( 'DELETE', 'APPLY_CHANGES' ) then
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'id', p_value => :P2_EMPNO );
    end if;

    -- add form item values as parameters for CREATE and APPLY_CHANGES
    if :REQUEST in ( 'CREATE', 'APPLY_CHANGES' ) then
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'ENAME',    p_value => :P2_ENAME );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'EMPNO',    p_value => :P2_EMPNO );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'JOB',      p_value => :P2_JOB );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'HIREDATE', p_value => to_char( to_date( :P2_HIREDATE ), 'YYYY-MM-DD' ) || 'T00:00:00Z' );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'SAL',      p_value => :P2_SAL );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'COMM',     p_value => coalesce( :P2_COMM, 'null' ) );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'MGR',      p_value => :P2_MGR );
        apex_exec.add_parameter( p_parameters => l_parameters, p_name => 'DEPTNO',   p_value => :P2_DEPTNO );
    end if;

        -- invoke Web Source Module for and select data
    apex_exec.execute_web_source(
        p_module_static_id => 'Auto_REST_Service_EMP',
        p_operation        => case :REQUEST
                                  when 'APPLY_CHANGES' then 'PUT'
                                  when 'CREATE'        then 'POST'
                                  when 'DELETE'        then 'DELETE' end,
        p_parameters       => l_parameters );
end;


--Manually  updating IG

-- Interactive grid Custom Process
-- Maual interactive grid process
begin
    --logger.log(':DEPARTMENT='||:DEPARTMENT||',:COURSE='||:COURSE);
    if :APEX$ROW_STATUS = 'D' then
        -- DELETE the record
        delete
        from course_dept_vw
        where dept_id   = :P23_DEPT_ID
        and   ucas_code = :COURSE;
    elsif :APEX$ROW_STATUS = 'C' then
        insert into course_dept_vw(ucas_code,dept_id)
        values (:COURSE, :P23_DEPT_ID)
        returning rowid into :ROWID;
        -- returning clause important otherwise newly added row will not be refreshed
        --logger.log('Row created');
    else
        -- it must be :APEX$ROW_STATUS = 'U'
        -- should be updating but update is restricted for this IG
        NULL;
    end if;
exception
    when others then
    logger.log_error('IG Save failure');
end;

---- validation

Validation > Value Required = true
Appearance > Template = required
Above is a client side validation for server side validation we need to add a validation as item is not null and add appropriate error message

Custom validation message instaed of "Please fill in this field."
Advanced > Custom Attributes = data-valid-message="This is a required field"

You can choose not to execute validations by turning off "Execute Validations" for any button submit




Examples
pattern="[0-9a-zA-Z]{4}" data-valid-message="Four character UCAS Code needed"
pattern="^[1-9][0-9]?$|^100$" data-valid-message="Valid values 1-100"

-- Setting Application ICON to be displayed in APP Builder
    Upload the icon as static application file better to be 64/64
    Edit application properties > application icon and provide the file name for Icon File Name.
    Note that file name should not contain #APP_IMAGES# part only file name is enough.
    File should not be uploded into any directory structure
--- Accessing sys_context from apex session
dbms_session.set_identifier(null); -- This is the key for fetching session value
select
    case regexp_substr(lower(sys_context('userenv', 'db_name')),'[^_]+',1,2)
    when 'dev' then    '<span style="color:green;font-weight:bold;text-align:center;font-size=400%">DEV</span>'
    when 'test' then '<span style="color:orange;font-weight:bold;text-align:center;font-size=400%">TEST</span>'
    else '<span style="color:red;font-weight:bold;text-align:center;font-size=400%">PRD</span>'
    end db_env
    ,sys_context('admin_app_env', 'cwf_url')
into
    :DB_ENV
    ,:CWF_URL
from dual;
-----

Setting Workspace Level message >
Manage instance > define login message and define system message

<center><span style="color:green;font-weight:bold;text-align:center;font-size=400%">DEV</span></center>
<center><span style="color:orange;font-weight:bold;text-align:center;font-size=400%">TEST</span></center>
<center><span style="color:red;font-weight:bold;text-align:center;font-size=400%">PRD</span></center>

url-mapping.xml

<?xml version="1.0" encoding="UTF-8"?>
<pool-config xmlns="http://xmlns.oracle.com/apex/pool-config">
    <pool name="dev" base-path="/dev" updated="2020-02-12T00:00:00.000Z"/>
    <pool name="test" base-path="/test" updated="2020-02-12T00:00:00.000Z"/>
    <pool name="apex" base-path="/prd" updated="2020-02-12T00:00:00.000Z"/>
</pool-config>

-- Interactive report linking

apex_util.ir_reset(p_page_id => 1);
apex_util.ir_filter(
    p_page_id=>1,
    p_report_column=>'DEPTNO',
    p_operator_abbr=>'EQ',
    p_filter_value=>'10');

--This resets the interactive report on a given page for the current user session
--and performs the same function as selecting Reset from the pull down menu.

apex_util.ir_clear(p_page_id => 16);

f?p=&APP_ID.:1:&APP_SESSION.:::RIR,CIR:

Cache definition:
- RIR: reset IR to primary report
- CIR: reset IR to primary report but with custom columns
- RP: reset IR pagination.

This example links, resets, and clears primary report settings. It additionally creates a ENAME = 'KING' filter on the primary report:
f?p=100:1:&APP_SESSION.:IR_PRIMARY::RIR,CIR:IR_ENAME:KING

As the name suggests, CIR Clears and RIR Resets.. But isn’t that the same?

Almost. The main difference is that CIR Clears the report, clearing all breakpoints, filters and other defined actions on your report, ignoring the settings of the primary report. RIR Resets the interactive report to the primary report.

In conclusion, use CIR to clear all filters and other settings set by the user or in the primary report. Use RIR if you want to reset to the primary report keeping all filters and columns of the primary report.

-- Report with style font icons
with course_rule_summary as
(
select
    ucas_code
    ,sum(case when required_for ='O' then 1 else 0 end) offer_rules
    ,sum(case when required_for ='R' then 1 else 0 end) rffer_rules
    ,sum(case when required_for is null then 1 else 0 end) other_rules
    ,count(*) total_rules
from rule_course
group by ucas_code
)
select
    c.ucas_code || ' - '|| c.course_title course
    ,c.tariff_advertised Offer
    ,c.tariff_accepted reffer
    ,c.url
    ,nvl(crs.offer_rules,0) offer_rules
    ,nvl(crs.rffer_rules,0) rffer_rules
    ,nvl(crs.other_rules,0) other_rules
    ,nvl(crs.total_rules,0) total_rules
    , case when c.vacancies_internal = 1
        then '<span aria-hidden="true" style="color:#4caf50" class="fa fa-play-circle"></span>'
        else '<span aria-hidden="true" style="color:#ffa000" class="fa fa-stop-circle"></span>'
    end open
from clr_course c
left join course_rule_summary crs
    on c.ucas_code = crs.ucas_code;

---
declare
    l_host_url      varchar2(4000);
    l_url           varchar2(4000);
    l_application   varchar2(30) := 'f?p=100:1';
    l_email_body    varchar2(32000);
begin
    l_host_url := apex_util.host_url('SCRIPT');
    l_url := l_host_url||l_application;
    l_email_body := 'The URL to the application is: '||l_url;
end;
-- apex_util.host_url('SCRIPT') Returns url : https://nsq915ap:8444/ords/
-- withoug script argument it returns https://nsq915ap:8444 (Except ords)

declare
       l_hash varchar2(4000);
   begin
       select apex_util.get_hash(apex_t_varchar2 (
                  empno, sal, comm ))
         into l_hash
         from emp
        where empno = :P1_EMPNO;

       if :P1_HASH <> l_hash then
           raise_application_error(-20001, 'Somebody already updated SAL/COMM');
       end if;

       update emp
          set sal = :P1_SAL,
              comm = :P1_COMM
        where empno = :P1_EMPNO;
   exception when no_data_found then
       raise_application_error(-20001, 'Employee not found');
   end;


DECLARE
    l_url  VARCHAR2(255);
BEGIN
    l_url := APEX_UTIL.URL_ENCODE('http://www.myurl.com?id=1&cat=foo');
END;

-- Link straight from report query
select
    rc.ucas_code || ' - '|| c.course_title course
    ,rc.minimum_score
    ,rc.required_for
    , case when rh.id <0
        then rh.description
        else
        '<a href="'
        || APEX_UTIL.PREPARE_URL(
            p_url => 'f?p=' || :APP_ID || ':30:' || :APP_SESSION || '::NO:RP:P30_RULE_ID:' || rh.id
            )
        ||'">'
        || rh.description
        ||'</a>'
        end description
    ,rh.id
from course_vw c
left join rule_course_vw rc
    on c.ucas_code = rc.ucas_code
join rule_header_vw rh
    on rc.rule_id = rh.id
order by coalesce(rc.updated, rc.created)


--------Setting session state from PLSQL

APEX_UTIL.set_session_state('P1_ITEM_1', to_char(systimestamp,'dd/mm/yyyy hh24:mi:ss:ff6'));

simply assigning like below also works from plsql process

:P1_ITEM_1 := to_char(systimestamp,'dd/mm/yyyy hh24:mi:ss:ff6');

--------- Creating apex session from PLSQL

begin
  apex_session.create_session(105,1,'SRAUT');
end;
/

begin
    dbms_output.put_line(
        apex_page.get_url (
            p_application => 105,
            p_page        => 2,
            p_items       => 'P2_DEPTNO',
            p_values      => '10'
        )
    );
end;
/
---------------------------
--
-- Conditional Links for a report
-- In this example if id is < 0 then show plain description else
-- show anchered text with link to page 30
-- make sure to change the description column has type plain text
-- and switch off escaping special characters in this report
--
select
    rc.ucas_code || ' - '|| c.course_title course
    ,rc.minimum_score
    ,rc.required_for
    , case when rh.id <0
        then rh.description
        else
        '<a href="'
        || APEX_UTIL.PREPARE_URL(
            p_url => 'f?p=' || :APP_ID || ':30:' || :APP_SESSION || '::NO:RP:P30_RULE_ID:' || rh.id
            )
        ||'">'
        || rh.description
        |'|</a>'
        end description
    ,rh.id
from course_vw c
left join rule_course_vw rc
    on c.ucas_code = rc.ucas_code
join rule_header_vw rh
    on rc.rule_id = rh.id

select
    username
    ,user_full_name
    ,role
    ,status
    ,created
    ,case
        when status != 'Pending'
        then  'class="ma-button disabled  btn waves-effect waves-light"'
        else 'class="ma-button btn btn-outlined waves-effect waves-light icon-float-right"'
    end   action_button_class
    ,'Approve'  Aprove_button
    ,'Reject'  Reject_button
    -- approved_by,
    -- approve_date,
    -- created_by,
    -- updated,
    -- updated_by
from user_access_request

Change columns Aprove_button and Reject_button to Links
set Link attribute = #ACTION_BUTTON_CLASS# and link text to #APROVE_BUTTON# and #REJECT_BUTTON#
Set tatic ID for the Report region as accesRequest(Make not static ID value is without hash)
set target Target URLs for both links as below
javascript:$('#accesRequest').trigger('APPROVE', {userName:"#USERNAME#", role:"#ROLE#"});void(0);
javascript:$('#accesRequest').trigger('REJECT', {userName:"#USERNAME#", role:"#ROLE#"});void(0);

Or we can usejavascript:apex.event.trigger(pSelector, pEvent, pData)
pSelector is the jQuery formatted selector used to trigger the Apex event.
pEvent is the browser event that will occur on the selector.
pData is not required.

javascript:apex.event.trigger(accesRequest, 'APPROVE', [{userName:'#USERNAME#',  role:'#ROLE#'}]);void(0);
javascript:apex.event.trigger(accesRequest, 'REJECT', [{userName:'#USERNAME#',  role:'#ROLE#'}]);void(0);

apex.event.trigger executes the "Dynamic Action".
[{...}] defines the variables to forward.
void(0) prevents the browser to do further actions.

What this means is when we click the button it will trigger two custom events APPROVE and REJECT on JQuery Selected #accesRequest

Create a Dynamic Action for custom event
Event = custom, Custom event = APPROVE JQuery Selector = #accesRequest
True Actions
Execute Java script = $s('P19_USERNAME', this.data.userName);
Execute PLSQL =

begin
    apex_acl.replace_user_roles (
        p_application_id  => :APP_ID,
        p_user_name       => :P19_USERNAME,
        p_role_static_ids => wwv_flow_t_varchar2(:P19_ROLE) );
    update user_access_request set status = 'Approved' where username=:P19_USERNAME;
    --
    -- Inside
    --
end;

begin
    apex_acl.replace_user_roles (
        p_application_id  => 100,
        p_user_name       => 'FORMSLD',
        p_role_static_ids => wwv_flow_t_varchar2('ADMIN') );
end;

begin
    apex_acl.remove_user_role (
        p_application_id => 255,
        p_user_name => 'FORMSLD',
        p_role_static_id => 'ADMIN' );
end;

begin
    apex_acl.remove_all_user_roles (
        p_application_id => 100,
        p_user_name => 'FORMSLD' );
end;
-------------------


-- Intialising the audit columns using page process. page process need to be before region
begin
    if :P15_ID is null then
        :P15_CREATED    := to_char(systimestamp, 'DD-MON-YYYY HH24.MI.SSXFF');
        :P15_CREATED_BY := :APP_USER;
        logger.log_info('P15_ID Is null');
    else
        :P15_UPDATED    := to_char(systimestamp, 'DD-MON-YYYY HH24.MI.SSXFF');
        :P15_UPDATED_BY := :APP_USER;
        logger.log_info('P15_ID='||:P15_ID);
    end if;
end;

or use a trigger

create or replace trigger trg_rule_header_aiu
before insert or update on rule_header
for each row
declare
begin
    if inserting then
        :new.created    := systimestamp;
        :new.created_by := nvl(v('app_user'), user);
    elsif updating then
        :new.updated    := systimestamp;
        :new.updated_by := nvl(v('app_user'), user);
    end if;

end;
/

---
Dynamic action of IG to capture last changed/selected record

Event on Selectionn change
Action execute java script

-- apex.item.setvalue sets the page item value and apex.server.process submits the item value to server session

if(this.data != null){
    if(this.data.selectedRecords[0]!= null){
        selectedRecord = this.data.selectedRecords[0][0];
        console.log(selectedRecord);
        //console.log(this.data.selectedRecords[0][4].v);
        var qual = this.data.selectedRecords[0][4].v;
        apex.item( "P30_QUALIFICATION" ).setValue( qual );
        apex.server.process('MY_PROCESS',{pageItems: '#P30_QUALIFICATION'},{dataType: "text"});
    }

}
-- Dynamic action to disable button to prevent duplicate submission

document.getElementById("CREATE_BUTTON").disabled=true;
apex.page.submit("CREATE");

Material apex theme submit is working fine but disabled is not. Workaround for showing the spinner is reload on submit = only for sucecss

Alternatively select two true action disable button and submit page with request=UPLOAD, dynamic actions by default shows spinner in material apex

CREATE_BUTTON is the static id of the button

Optionally you can set the following attributes but side effect is if page has validation errors then it will not be fixed because of second option

Enable Duplicate Page submissions
    Yes – Enable page to be re-posted
    No – Prevent page from being re-posted
Reload on Submit (New Feature for 5.1)
    Always
    Only For Success

---
Setting item value from plsql, one way is dynamic action returning value or else staright from plsql


  select first_name into v_empname
    from employees where employee_id = :P12_EMPNO;

    apex_util.set_session_state('P12_EMPLOYEE_NAME', v_empname);
----

Application Icon

Upload the SVG icon to the shared components and use this text as app-icon.css
.app-icon {
    background-image: url(app-icon.svg);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: 50%;
    background-color: #5A68AD;
}

for creating the SVG
https://inkscape.org/es/


Handy Tricks :

Display some text at the foter region
Static region, position=footer
<em>Counts of action items, milestones, and issues represent the number that are open. Categories with no active projects are not displayed.</em>


Report colour coding footer legend

<div class="t-StatusList-legend" style="padding: 8px; border-top: 1px solid rgba(0,0,0,.05); font-size: 11px;">
    <strong>Status Color Coding:</strong>
    <span class="t-Badge t-Badge--basic t-Badge--small is-complete">Closed</span>
    <span class="t-Badge t-Badge--basic t-Badge--small is-danger">Past Due</span>
    <span class="t-Badge t-Badge--basic t-Badge--small is-warning">Due Today</span>
    <span class="t-Badge t-Badge--basic t-Badge--small is-success">Due in the Future</span>
</div>

Column Data can be like

'<span class="t-Badge t-Badge--basic t-Badge--xsmall is-'||apex_escape.html(color_code)||' w100p">'||apex_escape.html(status)||'</span>' status

color_code values are
case when upper(m.milestone_status) = 'OPEN' and trunc(m.milestone_date) > trunc(sysdate) then 'success'
    when upper(m.milestone_status) = 'OPEN' and trunc(m.milestone_date) = trunc(sysdate) then 'warning'
    when upper(m.milestone_status) = 'OPEN' /* past due */ then 'danger'
    else 'complete' end as color_code,
end

Email client open in the client machine

var spinner$ = apex.util.showSpinner( $( "#projectPeople" ) );
// generateEmails is an Ajax Callback defined on this page that returns an JSON object.
apex.server.process( "generateEmails", {
    x01: $v( 'P200_ID' )
}, {
    success: function(pData) {
        var list = pData.emails.join( '; ' );
        window.location.href = encodeURI('mailto:' + list + '?subject=') + encodeURIComponent( $v( 'P200_PROJECT_NAME' ) );
        spinner$.remove();
    },
    error: function(pData) {
        console.log(pData);
    }
});

-- Showing a switch type column in report
select
    build_option_id ID,
    build_option_name build_option,
    build_option_status,
    apex_item.hidden(p_idx => 1, p_value => build_option_id) ||
    apex_item.hidden(p_idx => 2, p_value => build_option_status) ||
    apex_item.switch (
       p_idx => 3,
       p_value => build_option_status,
       p_on_value => 'Include',
       p_on_label => 'Yes',
       p_off_value => 'Exclude',
       p_off_label => 'No',
       p_item_id => 'BO_OPT_' || rownum,
       p_item_label => apex_escape.html(build_option_name) || ': Is Enabled',
       p_attributes => 'style="white-space:pre;"') toggle_build_option,
    component_comment,
    last_updated_on updated,
    lower(last_updated_by) updated_by
from
    apex_application_build_options bo
where
    application_id = :APP_ID
and
    build_option_name in ('Competitors', 'Contacts', 'Feedback', 'Geography', 'Partners')
order by
    2 asc
---
APEX CSS Classes : Class=step-container


If you want to show a list of steps in the screen : Sample application customer tracker page 1000
Create a static region: region template=alert, template options : alert display=horizontal, Alert Icons=Show Icons, Alert type = Information,
CSS Class=step-container and Icon=fa-number-4

Sttic Radio Groups can be shown using shared component list.

Showing right side context menu

Ceate list with detail potions and target pages
Add a page region of type list
Position=right side coulmn
template =standard
Template Option=Remove body padding, style=Stack region, item width=stretch form fields, level alignment=right
Region attribute : list template : link list, template options : style=actions
Example app - customer tacker and page number =53



select * from table(wwv_flow_t_temp_lov_data(wwv_flow_t_temp_lov_value(1,1,1), wwv_flow_t_temp_lov_value(2,1,2), wwv_flow_t_temp_lov_value(3,1,3)));

javascript:$s('P4_PRODUCT_ID',&PRODUCT_ID.); --re directing to a specific url as url syntax

apex_application.g_print_success_message := '<span style="color:green">Computer created</span>';

apex_application.g_print_success_message := '<span style="color:red">No valid computer name</span>';

apex_error.add_error
        (p_message               => 'No value in the Employee number field.',
        p_display_location      => apex_error.c_inline_in_notification
        );

apex_error.add_error
    (p_message               =>    'Employee No : '
                                || :p11_empno
                                || ' already exists.',
    p_display_location      => apex_error.c_inline_in_notification
    );

apex_application.g_print_success_message :=
    '<span style="color : white ">Success :</span>'
    || TRIM (:p11_empno);

Dynamic action to change text colour :

$v("P3_CHECKBOX") === $v("P3_ANSWER")

APEX Icons : fa fa-thumbs-up fam-check fam-is-success
fa fa-thumbs-down fam-x fam-is-danger

--- Showing success message from modal dialog close

Create a dynamic action on dialog close of the triggering region and set action as java script

var $ = apex.jQuery;
if ( this.data.successMessage ) {
    // use new API to show the success message if any that came from the dialog
    apex.message.showPageSuccess(this.data.successMessage.text);
}
// Refresh the report region
$("#department_report").trigger("apexrefresh");


-- Jquery Selector

All buttons with id starts with BT_ e.g BT_SAVE, BT_CANCEL, BT_DELETE

"[id|='BT_']"

---

apex.message.alert("DA triggered");
apex.message.alert("Hello &P10_EMPNAME.");

apex.message.showPageSuccess('Action Processed.');

apex.message.showPageSuccess(this.data.successMessage.text);


--------------------------------------------
server side condition : plsql function body

    if apex_authentication.is_authenticated then
        return false;
    else
        return true;
    end if;
--------------------------------------------
Region type : PLSQL Dynamic content
sys.htp.p('<p>'||:P50_WARNING_MESSAGE||'</p>');

server side condition = PLSQL Expression : :P50_WARNING_MESSAGE is not null and :P50_CAN_TAKE_YN = 'N'

-------------------------------------------
To create a editabel link manually in classic report

go to the columns field of primary key column.
Make the column type as link
Mark the heading as hidden : <span class="u-VisuallyHidden">Edit</span>
Then on the link section set link text : <img src="#IMAGE_PREFIX#app_ui/img/icons/apex-edit-pencil.png" class="apex-edit-pencil" alt="">

------------------------------------------
-- PLSQL Dynamic content to display an image

declare
   c integer := 0;
begin
   for c2 in (
      select image_height, image_width
        from EBA_LIVEPOLL_SECTIONS
       where id = :P38_ID
         and NVL(dbms_lob.getlength(IMAGE_BLOB),0) > 0
   ) loop
      c := c + 1;
      sys.htp.p('<p><img src="'||apex_util.get_blob_file_src('P38_IMAGE_BLOB',:P38_ID)||'"');
      if c2.image_height is not null then
         sys.htp.p(' height="'|| c2.image_height ||'"');
      end if;
      if c2.image_width is not null then
         sys.htp.p(' width="'|| c2.image_width ||'"');
      end if;
      sys.htp.p(' /></p>');
   end loop;
   if c = 0 then
       sys.htp.p('<p>No image has been selected click the <strong>choose file</strong> button to add an image.</p>');
   end if;
end;

----
 Interactive report with icons

 select
  task_name,
  start_date,
  status,
  case status
    when 'Open' then 'fa-clock-o is-open'
    when 'Closed' then 'fa-check-circle is-closed'
    when 'On-Hold' then 'fa-exclamation-circle is-holding'
    when 'Pending' then 'fa-exclamation-triangle is-pending'
  end status_icon,
  assigned_to
from eba_ut_chart_tasks
order by 2

Make the status_icon as hidden and add html expression for status column as  <span class="fa #STATUS_ICON#"></span> #STATUS#
---


-- ora_hash can be used
Returns a hash function for a given user
select ora_hash('SAROJ RANJAN',44) from dual

----
For putting hard coded text into existing items

Add a java script function in the "Function and Global Variable Declaration" of the page and on button click set action to "redirect to URl" and set target as javascript:set_item();

function set_item()
{
$x('P210_COPY_PASTE').value= $v('P210_SAMPLE_DATA');
$x('P210_SEPARATOR').value= ',';
$s('P210_FIRST_ROW', 'Y');
}


function set_item()
{

    $x('P4_UCAS_PERSONAL_ID').value="0000000000";
    //console.log("focusout happened! "+ $x('P4_UCAS_PERSONAL_ID').value);
    $x('P4_EMAIL_ID').value="temp@mail.com";
    $x('P4_GIVEN_NAME').value="TestName";
    $x('P4_FAMILY_NAME').value="TestSurName";
    $x('P4_NATIONALITY').value="GBR";
    $x('P4_DATE_OF_BIRTH').value= "09"+'-'+"OCT"+'-'+"2000";

}

$s is setting the vaue of check box.
----------------------------------------

select count(*) from APEX_050000.WWV_FLOWS where id = 4000;

If the count is 0 it is a runtime, if the count is 1, it is a full development environment.

Apex Work Help
----- Keyboard Shortcuts

Page Designer Alt+F1 Go to Help
Page Designer Ctrl+F1 Go to Messages
Page Designer Ctrl+Y Redo
Page Designer Ctrl+Z Undo
Page Designer Ctrl+Alt+S Save
Page Designer Ctrl+Alt+R Save and Run Page
Page Designer Ctrl+Alt+E Toggle Hide Empty Positions
Page Designer Property Editor with focus on a group heading Home/End keys

Page Designer Alt+1 Go to Rendering
Page Designer Alt+2 Go to Dynamic Actions
Page Designer Alt+3 Go to Processing
Page Designer Alt+4 Go to Page Shared Components
Page Designer Alt+5 Go to Grid Layout
Page Designer Alt+6 Go to Property Editor
Page Designer Alt+7 Go to Gallery Regions
Page Designer Alt+8 Go to Gallery Items
Page Designer Alt+9 Go to Gallery Buttons

-----
They're five ways to reference variables in APEX:

1- :Bind_variables -- can be used in any block of SQL or PL/SQL code inside APEX. also in tabular form column name refeence
2- &Substitution_strings. -- can be used anywhere in your APEX application such as a HTML region or even a template. You can also use them in inline SQL and PL/SQL code but it is not recommended for security reasons.
3- V / NV functions -- If you want to reference APEX variables in compiled code, such as views, packages, and procedures, you can't use bind variables. The easiest way to reference the variables is to use the V (for strings) and NV (for numbers) functions.
4- #Hash#  -- The hash notation of #variable# is used in multiple places. When creating column links in a report you can use the hash notation to represent column values. (example #EMPNO# can be used to reference the EMPNO column in a report)
5 "Shortcuts".

----- Apex Views

select * from APEX_WORKSPACE_ACCESS_LOG order by access_date desc
select * from APEX_WORKSPACE_ACTIVITY_LOG
select * from APEX_WORKSPACE_LOG_SUMMARY
select * from APEX_WORKSPACE_SESSIONS

----- 1

Manually Refreshing Oracle Application Express Components
Although the Dynamic Action framework provides refresh capability for supported Oracle Application Express components, there may be cases where you wish to manually invoke a refresh from JavaScript code.

apex.event.trigger( "#myRegionStaticID", "apexrefresh" );

apex.event.trigger( "EmployeeIR", "apexrefresh" );

----- 2

Dynamic Actions

Dynamic actions provide a way to define complex client-side behavior declaratively without the need for JavaScript. Using the Dynamic Action Create wizard, you specify
an action that is performed when a defined set of conditions occur. You can also specify which elements are affected by the action, and when and how they are affected.
When working with dynamic actions, you should be mindful of the fact that the more dynamic actions you add to a page, the greater your overall page size. This is because the dynamic action framework emits additional code to the client for each dynamic action defined.

Dynamic Action Events
You can define dynamic actions can to fire based on events that happen on the page. (Browser Events, Framework Events, Component Events)
Browser Events : all supported events, including the internal JavaScript event name in brackets.
Change (change) - Fires when a control loses the input focus and its value has been modified since gaining focus.
Click (click), Double Click (dblclick), Get Focus (focusing), Key Down (keydown), Key Press (keypress), Key Release (keyup), Lose Focus (focusout), Mouse Button Press (mousedown), Mouse Button Release (mouseup), Mouse Enter (mouseenter), Mouse Leave (mouseleave), Orientation Change (orientationchange) - Fires when a devices orientation changes (by turning it horizontally or vertically).Page Load (Desktop User Interface uses ready, jQuery Mobile Smartphone User Interface uses pageint), Resize (resize), Scroll (scroll), Select (select) - Fires when a user selects some text in a text field.,
Swipe (swipe) - Fires when a horizontal drag of 30px or more (and less than 75px vertically) occurs, within a 1 second duration, Swipe Left (swipeleft), Tap (tap) - Fires after a quick touch event., Tap and Hold (taphold),

Framework Events : After Refresh (apexafterrefresh), Before Page Submit (apexbeforepagesubmit), Before Refresh (apexbeforerefresh)
Component Events :

When, selection type = Select the type of page element or construct to be used to trigger the event. Item(s) (for multiple items give a comma separated list), Button, Region, jQuery Selector, JavaScript Expression

Actions are categorised into following category
Component(clear, disable, enable, hide, show, expand tree, collapse tree, set value, set focus),
execute(jave script, plsql), navigation(cancel dialog, close dialog, submit page),
style(add class, remove class, set style),
notification(alert, confirm),
misclenaious (cancel event)

dynamic action when > item equals to value, value needs to be given without quotes.
Action hide and show hides the lebels also.
Add/Remove Classes
When > Event=loose focus, selection type=items, items = p7_item condition= is null,

True Action -> action = add class, fire when event result is = true, class= validation_error, affected elements > item = item name
False Action -> action = remove class


Add class : Define a dynamic action on event = loose focus selection type= items, items = PX_ITEM_NAME, client side condition item is null then true action add class and set class=validation_error, also add   false action of remove class

Setting more prominent focus :  event= get focus, selection type = region, region = region name,
True action = add class, class=showfocus, selection type=event source

also create opposite DA for loose focus

Stripe Report DA plugin : Event = after refresh, selection type=region, region=region_name
True action = stripe report plugin, color = LemonChiffon

Execute PLSQL on button press : button action = Defined by Dynamic Action,
True action = action = Ececute PLSQL, PLSQL =  update eba_demo_da_emp set sal = sal * 1.1;
True action= action=refresh, selection type= region, region name= region
true action = action=alert, text=salary updated

Server side Set Value :

event = change, selection type=items, items=item_name,
true action : action=setvalue, set type = sql statement,
SQL=
select d.loc location,
       count(e.empno) num_employees
  from eba_demo_da_dept d,
       eba_demo_da_emp e
 where d.deptno = e.deptno(+)
   and d.deptno = :P13_DEPTNO
 group by d.loc
 items to submit = P13_DEPTNO
Under affected elements, set selection type=items, and items=P13_LOCATION,P13_NO_OF_EMPLOYEES.
Out put of the above query will be put on these two items.

It can be PLSQL function body e.g return getCommission(:P1_SAL, :P1_JOB);, or declare x number begin .. returnx;  end;

There is a highlight plug in which highlight for few seconds

Timer DA


<span class="t-Icon fa fa-trash-o" aria-hidden="true"></span>
id='#ID#' class="delete t-Button t-Button--danger t-Button--simple t-Button--small" title="Delete Employee: #ENAME#"

----- 3

Bind variable :APP_USER
PL/SQL V('APP_USER')
Substitution string &APP_USER.
Examples
From within an HTML region: � Hello you are logged in as &APP_USER.
Using PL/SQL: � htp.p('Hello you are logged in as'|| V('APP_USER'));
As a bind variable: � SELECT * FROM some_table WHERE user_id = :APP_USER

----- 4
First make sure your dialogs are resizable by adding resizable:true to the page Dialogs Attributes.

How to make the browser remember the size of dialog for a session duration

create a global page if not already > create a dynamic action with below attributes

Right click and choose Create Dynamic Action. Enter these attributes:
 Name: persist dialog size
 Event: Custom
 Custom Event: dialogresizestop dialogdragstop
 Selector Type: jQuery Selector
 jQuery Selector: body
 Change the Show action to Execute JavaScript Code.
 Change the Selection Type to - Select -.
 Remember to set Fire on Page Load to No.
 Enter the following JavaScript

 // handle dialog move and resize
var key, value, store,
    dialog$ = $(this.browserEvent.target), // the dialog being moved or resized
    // the dragstop (move) event doesn't include size so get it from the options
    size = this.data.size ||
        { width: dialog$.dialog("option", "width"),
         height: dialog$.dialog("option", "height") },
    pos = this.data.position;

// Only save the state of apex dialogs.
// Give your dialogs their own class if you want to target specific dialogs
if (dialog$.parents(".ui-dialog--apex").length) {
    // store the dialog state under a key that includes
    //   the app id, page id, and dialog page id
    value = [size.width, size.height, pos.left, pos.top];
    key = dialog$.find("iframe").attr("src");
    key = "dlg_" + key.split(":")[1]; // get the page of the dialog being opened
    // save the dialog state in browser session storage
    store = apex.storage.getScopedSessionStorage( {
        prefix: "DialogSize", usePageId: true} );
    store.setItem(key, value.join(":"));
}

This dynamic action will save the size and position of any APEX modal dialog page to DOM session storage when it changes. The next step is to restore the size and position when that same dialog is opened again.

Still on the global page, create another Dynamic Action with these attributes:
 Name: restore dialog size
 Event: Custom
 Custom Event: dialogcreate
 Selector Type: jQuery Selector
 jQuery Selector: body
 Change the Show action to Execute JavaScript Code.
 Change the Selection Type to - Select -.
 Remember to set Fire on Page Load to No.
 Enter the following JavaScript:

 var key, value, store,
    dialog$ = $(this.browserEvent.target); // this is the dialog created

// Only restore state for apex dialogs
if (dialog$.parents(".ui-dialog--apex").length) {
    // the key includes the dialog page that just opened
    key = dialog$.find("iframe").attr("src");
    key = "dlg_" + key.split(":")[1];
    store = apex.storage.getScopedSessionStorage( {
        prefix: "DialogSize", usePageId: true} );
    value = store.getItem(key);
    if (value) {
        value = value.split(":");
        if (value.length === 4) {
            dialog$.dialog("option", "width", parseInt(value[0], 10));
            dialog$.dialog("option", "height", parseInt(value[1], 10));
            dialog$.dialog("option", "position",
                           [parseInt(value[2], 10), parseInt(value[3], 10)]);
        }
    }
}

Apex Help Provide the following info :

<li>Full APEX version
 <li>Full DB/version/edition/host OS
 <li>Web server architecture (EPG, OHS or APEX listener/host OS)
 <li>Browser(s) and version(s) used
 <li>Theme
 <li>Template(s)
 <li>Region/item type(s)


----- 5
----- 6
----- 7
----- 8
----- 9
----- 10
----- Highlight report cell background

I added this to the "Execute when Page Loads" page attribute - it could utilised within a dynamic action, if required.

$("#report_pivot tbody tr td").each(function(){
   if ($(this).attr('headers') != 'TOT') {
     if (parseInt($(this).text()) < 1000)
        $(this).css({"background-color":"SandyBrown"});
     else if(parseInt($(this).text()) > 2000)
        $(this).css({"background-color":"lightgreen"});
   }
});I wanted to ignore the 'Total' column, so I found the first IF statement satisfies that easier than a CSS exclusion clause.
This block could be adapted to do all sorts of things - for instance, I've cleared out the cells in other reports where the value equals 100.

I also added this as inline CSS just to border all the report cells.

table.uReportStandard>tbody>tr>td {
  border: 1px solid #ddd;
}

-- HTML Tags

<ul> <li></li> <li></li> </ul> - onordered list
<ol> <li></li> <li></li> </ol> - Ordered list
<p></p> - Paragraph
<br> - Defines a single line break
<b> - Defines bold text
<li> - Defines a list item
<table> - Defines a table
<td> - Defines a cell in a table
<tr> - Defines a row in a table
The <span> tag is used to group inline-elements in a document. The <span> tag provides no visual change by itself. The <span> tag provides a way to add a hook to a part of a text or a part of a document.


<ul>
<li><a href="https://docs.oracle.com/cd/E59726_01/doc.50/e39147/toc.htm">      APEX Application Builder Guide </a></li>
<li><a href="http://asktom.oracle.com/pls/apex/f?p=100:1">      Ask Tom: An Oracle Help Site </a></li>
<li><a href="f?p=&APP_ID.:2:&APP_SESSION.">      The Region Practice page</a></li>
</ul>

<div align=center>
<a href="f?p=&APP_ID.:3:&APP_SESSION."><img src="&APP_IMAGES.employees.jpg"></a>
<br>Employees</div>

<span style="font-size:150%;font-weight:bold">#ENAME#</span>
<span style="font-size:150%;font-weight:bold">#ENAME#</span> the #JOB#

Conditional Formatting
select e.*,
   case when e.Sal>2500 then 'red' else 'black' end as SalColor
from EMP e

<span style="color:#SALCOLOR#">#SAL#</span>

select e.*,
   case when e.Sal>2500 then 'red' else 'black' end as SalColor,
   case when e.Offsite = 'Y' then 'checkgreen.jpg' else 'checkred.jpg' end as OffsiteImage
from EMP e

<img src="&APP_IMAGES.#OFFSITEIMAGE#">

<a href="http://www.infoplease.com/year/#HIREYEAR#.html"   target="_blank">#HIREDATE#</a>

HTML code to define a link has two parts: the target URL and the link text. Note that the second argument to the <a> tag is target="_blank". This argument causes the target page to open in a new browser tab.

jQuery Syntax
Basic syntax is: $(selector).action()

$(this).hide() - hides the current element.
$("p").hide() - hides all <p> elements.
$(".test").hide() - hides all elements with class="test".
$("#test").hide() - hides the element with id="test".

$(document).ready(function(){

   // jQuery methods go here...

 });
 The jQuery team has also created following shorter method for the document ready event:

 $(function(){

   // jQuery methods go here...

 });




Example : When a user clicks on a button, all <p> elements will be hidden:

$(document).ready(function(){
     $("button").click(function(){
         $("p").hide();
     });
 });

Example : When a user clicks on a button, the element with id="test" will be hidden:

$(document).ready(function(){
     $("button").click(function(){
         $("#test").hide();
     });
 });

 Example : When a user clicks on a button, the elements with class="test" will be hidden:
 $(document).ready(function(){
     $("button").click(function(){
         $(".test").hide();
     });
 });


<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("tr:even").css("background-color", "yellow");
});
</script>
</head>
<body>

<h1>Welcome to My Web Page</h1>

<table border="1">
  <tr>
    <th>Company</th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Alfreds Futterkiste</td>
    <td>Germany</td>
  </tr>
  <tr>
    <td>Berglunds snabbk�p</td>
    <td>Sweden</td>
  </tr>
  <tr>
    <td>Centro comercial Moctezuma</td>
    <td>Mexico</td>
  </tr>
  <tr>
    <td>Ernst Handel</td>
    <td>Austria</td>
  </tr>
  <tr>
    <td>Island Trading</td>
    <td>UK</td>
  </tr>
</table>

</body>
</html>

jQuery Event Methods

The following example says: When a click event fires on a <p> element; hide the current <p> element:
$("p").click(function(){
     $(this).hide();
 });

Here are some common DOM events:

Mouse Events : click, dblclick, mouseenter, mouseleave
Keyboard Events : keypress, keydown, keyup
Form Events : submit, change, focus, blur
Document/Window Events : load, resize, scroll, unload

Example Stylesheet:
 .important {
     font-weight: bold;
     font-size: xx-large;
 }

.blue {
     color: blue;
 }


$("input").focus(function(){
     $(this).css("background-color", "#cccccc");
 });

 $("button").click(function(){
     $("#div1").addClass("important blue");
 });

 $("button").click(function(){
     $("h1, h2, p").removeClass("blue");
 });

----- jQuery - Get Content and Attributes

<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("button").click(function(){
        alert("Value: " + $("#test").val());
    });
});
</script>
</head>
<body>

<p>Name: <input type="text" id="test" value="Mickey Mouse"></p>

<button>Show Value</button>

</body>
</html>

Adding the below script in section "Execute when Page Loads" of the page pops up a alert box with the value of an text box element P10_SECTION_CATEGORY upon clicking on breadcrumb element with staic id as id_bc. Pops up the current content of the element(not posted value)
$(document).ready(function(){
    $("#id_bc").click(function(){
        alert("Value: " + $("#P10_SECTION_CATEGORY").val());
    });
});

-- Disable a button to avoid duplicate submission
$(document).ready(function(){
    $("#id_button").click(function(){
        $(this).attr("disabled", "disabled");
    });
});

.important {
  font-weight: bold;
  font-size: xx-large;
}

.blue {
  color: blue;
}

$(".t-LinksList-item").click(function(){
   alert("Value: " + $("#P10_SECTION_CATEGORY").val());
   $(".t-LinksList-item").removeClass("blue");
  $(this).addClass("important blue");
});


span[data-number^="1"]{color:red;}


/*
$(document).ready(function(){
    $("#id_bc").click(function(){
        alert("Value: " + $("#P10_SECTION_CATEGORY").val());
    });
});
*/

select count(*) from apex_application_files; -- return 0, since we are not running the query inside the APEX environment (that is, our workspace is not defined in SQL*Plus).

select  wwv_flow_api.get_security_group_id from dual;

exec wwv_flow_api.set_security_group_id;

select  wwv_flow_api.get_security_group_id from dual;

select count(*) from apex_application_files;

select dbms_flashback.get_system_change_number from dual;

insert into apex_application_files select * from apex_application_files as of scn 3334372;

apex_dictionary

duplicate submission, highlighting differences in report


-- Displaying department name instead of deptno in a report
To tell APEX to use a list of values when displaying a column, change the column�s type to Plain Text (based on List of Values).

:APP_USER <> 'APEX_PUBLIC_USER'


v_vals apex_t_varchar2 := apex_t_varchar2('CLERK', 20);
v_result varchar2(1000) := apex_util.get_hash(v_vals); -- variable v_result will contain the hash of the values {'CLERK', 20}.

store the old hash value and before applying the update get the hash values again to check if the record has been updated by another session in the mean time.

Example SQL Expression = :REQUEST in ('Insert', 'Delete', 'Update')

Dialog Box >

Basic Dialog

create a staic region with content that needs to be  shown in dialog box.
in the advanced > attribute section add text : style="display:none" title="Basic Dialog"
this will ensure that this region will not be displayed as a part of normal page rendering.
Add a button and create a dynamic action to execute java script on click of the button.
add java script code as apex.jQuery(this.affectedElements).dialog();
in the affected elements section select selection type = region and region=name of the region

Basic modal dialogue > same as above only java script needs to be changed as

apex.jQuery(this.affectedElements).dialog({modal: true});

Stylized Modal Dialog > same as above only java script needs to be changed as

apex.jQuery(this.affectedElements).dialog({
	closeOnEscape   : true,
	dialogClass     : 'customStyles',
	draggable       : false,
	height          : 'auto',
	modal           : true,
	resizable       : false,
	width           : 'auto',
	open            : function(event, ui){
	    // Bind click handler on the overlay, to force dialog closing
	    apex.jQuery('.ui-widget-overlay').bind('click', function() {
	        apex.jQuery(this).prev().find('div:nth-child(2)').dialog('close');
	    });
	}
});

Opening a modal page for adding department
This can be done in two ways:
1. By creating separate page and setting the target page's Page Mode= Modal Dialog and creating on button click page redirect to this page.
2. By creating separate region in the same page and setting region template to inline dialog and region position to inline dialog - This will stop appearing in normal page.
Then Button action > redirection to URL, URL= javascript:openModal('addDept'); where addDept is the static id of the region providing functioality of adding department
Passing row values from a interactive report to modal window : Report attribute> link column=link to custom target, target=javascript:$s('P2_ID','#DEPTNO#');openModal('editDept');


If you want to sibmit a page item after it's changed, create a dynamic action of Execute PLSQL Code, set code to NULL; and in the  page item to submitt section choose the page item.

Redirecting interactive report -
clear cache = CIR (Clearing report settings)
clear cache = RIR (Resetting to Developer Defaults)
clear cache = 18,RIR set these item =IRGT_BUDGET, With these values=5000 (Filtering Report for budgets greater than 5000)

Html form element attributes to adjust width of select list : Advanced > custom attributes = style="width:200px" ,
mnw160 works for text boxes > advanced > CSS classes  = mnw160

select  vt.template_id
       ,vt.template_name
       ,vt.template_typ_cd || ' ~ ' || vt.template_typ_desc template_typ_desc
       ,vt.source_file_name
       ,vt.etl_active_indicator
       ,vt.updts
       ,vt.updbyid
       ,vt.insts
       ,vt.insbyid
       ,1 action
from    vams_template vt

sys.dbms_lob.getlength(file_blob) download

select  vt.template_id
       ,vt.template_name
       ,vt.template_typ_cd || ' ~ ' || vt.template_typ_desc template_typ_desc
       ,vt.source_file_name
       ,sys.dbms_lob.getlength(vt.source_file) download
       ,1 action
from    vams_template vt

select  vt.template_id
       ,vt.template_name
       ,vt.template_typ_cd || ' ~ ' || vt.template_typ_desc template_typ_desc
       ,vt.source_file_name
       ,sys.dbms_lob.getlength(vt.source_file) download
       ,1 action
from    vams_template vt


apex_util.get_blob_file_src(vt.source_file_name,vt.template_id)

Providing doanload link for BLOB files:

Create a new column as : sys.dbms_lob.getlength(vt.source_file) download
vt.source_file is the name of the column containing the blob data.
download will be the column header in the report.

Then change this column type as Download Blob and add further details about table name, column name, mime type etc.

Custom Buttons inside report :
Column Action > type=link, link text=Manage Items, link attributes = class="t-Button t-Button--hot"

For diaplsying icons : Link text = <span class="t-Icon fa fa-copy"></span><span class="visuallyhidden">Copy</span>
Link Attributes = class="t-Button t-Button--warning" title="Copy"
-- will show icon but hiden text "copy", text will be displayed when mouse hovered.

Showing description on mouse hover of a report column
<span title="#COLUMN_DESCR#">#COLUMN_NAME#</span>

target = page number and pass all values

Adjusting the column width in interactive report :

Syntax = #regionStaticId th#colHiredate, #regionStaticId td[headers=colHiredate]{width:100px}

Staic id of column name = IR_COL_TEST
Staic id of Region = IR_REG_TEST
Then put the below text in the inline CSS of the page : th#IR_COL_TEST, #IR_REG_TEST td[headers=IR_COL_TEST]{width:300px}

Tips :

Use large buttons in wizard type alert region.

Conditional edit link

select
       case when status != 'Closed'
            then '<a href="'||apex_util.prepare_url('f?p='||:APP_ID||':2:'||:APP_SESSION||':::2:P2_ROWID:'||ROWID) || '"><img src="#IMAGE_PREFIX#menu/pencil2_16x16.gif" alt="edit"></a>'
            else '&nbsp;'
            end edit_link,
       PROJECT,
       TASK_NAME,
       STATUS,
       ASSIGNED_TO,
       BUDGET,
       COST,
       case when status = 'On-Hold' then 0
            when status = 'Closed'  then cost
            else budget
            end estimated_cost
from EBA_DEMO_IR_PROJECTS

Drill down report :

Change the column type to link. Provide the link target and pass required columns; link text #columnname#, apply format mask as applicable.

-- If you place any item in the position=master detail(in lay out section) that will be diaplayed as bread crumb back ground

--One handy JavaScript function is setFocus.
Using the Page HTML Body Attribute will modify the <body> tag as shown here:

<body onLoad="javascript:setFocus('P4_USERNAME');">

Calling a java script from a buton click > edit button attribute, target as url and write the script invocation code.

 >> Case Insensitive Searching  in Application Express
execute immediate 'alter session set NLS_COMP=LINGUISTIC';
execute immediate  'alter session set NLS_SORT=BINARY_CI';

Tuning for case insensitive queries  in Application Express

Depending on the size of the table and type of queries, we may want to build linguistic indexes on the columns to allow case insensitive queries.
create index nlsci1_gen_person on   MY_PERSON(NLSSORT(PERSON_LAST_NAME, 'NLS_SORT=BINARY_CI'));

This is a great example of using case insensitive data inside Oracle and creating a case insensitive index to allow queries to made in initcap, upper or lower, all without invalidating the index


-- Create page items, write a page process of plsql anonymous block on global page to intialize these items.

e.g
set globals
select count(*) into :STORES from oow_demo_stores;
select count(*) into :PRODUCTS from oow_demo_items;

-- Data upload application

Process train -> template=wizard container, attribute list template= wizard progress
button position previous and next, button size large.


-------------  Deployment

We strongly recommend not storing any files for your application in the virtual directory /i/. It is used for APEX internal files and images. Once you upgrade your APEX version to a new release this will be problematic in two areas.

It is better to create a separate virtual directory to store application-specific files, for example, /apex_custom/.

all environments use the exact same workspace name, workspace id, and application id, as well as the parsing schema.

Disable Logging
Shared Components > Edit Application Properties > Logging
Each time a page is accessed, a log entry is stored. You can reference it from the APEX_WORKSPACE_ACTIVITY_LOG view.

The following query identifies when an error occurs at the page or region level:
SELECT *
FROM apex_workspace_activity_log
WHERE error_message IS NOT NULL

-- Find most accessed pages
SELECT application_id,
    application_name,
    page_id,
    page_name,
    SUM (page_id) page_hit_count
FROM apex_workspace_activity_log
GROUP BY application_id,
application_name,
page_id,
page_name
ORDER BY SUM (page_id) DESC

-- Find slowest pages
-- Note: This depends on how you calculate slow
SELECT application_id,
    application_name,
    page_id,
    page_name,
    ROUND (AVG (elapsed_time), 5) avg_elapsed_time,
    SUM (page_id) page_hit_count,
    MEDIAN (elapsed_time) median_elapsed_time
FROM apex_workspace_activity_log
GROUP BY application_id,
application_name,
page_id,
page_name

The APEX_WORKSPACE_ACCESS_LOG stores all the login attempts to your APEX applications. The access log can be extremely useful when you�re debugging user-authentication issues.

If you create your own authentication process, you should use the APEX_UTIL.SET_AUTHENTICATION_RESULT and APEX_UTIL.SET_CUSTOM_AUTH_STATUS procedures to ensure that you populate the access log with meaningful messages. For more information on these authentication procedures, please read the APEX API documentation.

Managing Workspaces

SELECT * FROM apex_release
SELECT * FROM v$version

SELECT * FROM apex_developer_activity_log
apex_dictionary : view is the top-level interface into the dictionary for all the other views and information

Retrieving Page Branches
select
page_id as id,
branch_action
from
APEX_APPLICATION_PAGE_BRANCHES
where
application_id = 103

Querying the Flow Between Pages
select
page_id as page_from,
regexp_replace(branch_action,'(.*)(\:)([[:digit:]]+)(\:)(.*)', '\3') as page_to,
branch_point
from
APEX_APPLICATION_PAGE_BRANCHES
where
application_id = 103

This query allows you to produce a report that details how your pages link to each other, perhaps to help you find outdated or unwanted links between pages.

Retrieving Modification Dates

Another common requirement is to be able to determine when things were last changed in the application. Perhaps you want a list of anything changed in the last week, or perhaps you want to know when each page was last modified.

select
page_id,
last_updated_by,
to_char(last_updated_on,
'DD/MM/YYYY HH24:MI:SS') as last_updated
from
apex_application_pages
where
application_id = 103
order by
last_updated_on desc

1. Export the application from the test environment.
2. Import the application into the production environment but give it a new application ID (say application 208).
3. Test the application in production to make sure it works correctly.
4. Switch the method you�re using to manage the http://yourserver/buglist/ URL to point to application 208 once you�re sure it works correctly.

Before transmitting any data, the sender encrypts its message, and the receiver must in turn decrypt the message before processing it. The encryption and decryption is accomplished through a method called "public key encryption.

When we say a message was sent using HTTPS, what we are actually saying is that the message was first encrypted using SSL, transmitted and received using normal HTTP protocol, and then decrypted by the receiver, also with SSL.

it's quite CPU-intensive, and it significantly slows down the speed of transmission.

Additional operation of decryption, encryption, and handshaking would put extra load on the server and can slow down the speed of transmission.

I don't think we need Certificate Signing Request(CSR) and get SSL generated by Certificate Authority(Verisign) but this means that access to apex pages will show warning message "Certificate is Un-trusted or issued by un-trusted authority." , unless the certificate is added manually to the trusted list.

The cached credentials will continue to allow a user to log on locally

Users and workstations will be fine, except they cannot access any resources on the server that is down. Once they have authenticated, they have a token that grants them permissions and no longer need to communicate with a Domain Controller for most tasks
When AD is down, workstation will not be logged out, they will be remained logged, but they can't use any shared resources(told by Richard).
They can login back even on the same system, after rebooting or login off even though AD is down, because of cache credentials(if its not disabled).
Seamless end user experience and increased productivity.


SSO saves users from having to memorize a long list of passwords. How does that make you save on costs? Well according to Gartner, up to 50% of all Help Desk calls are just requests for password resets.

If you are certain that your table with never have more than N rows, use a VARRAY (N) to hold the fetched data.
If that limit is exceeded, Oracle will raise an error. This is not, however, a very common scenario.
If you do not know in advance how many rows you might retrieve, you should:
1. Declare an explicit cursor.
2. Fetch BULK COLLECT with the LIMIT clause.

CREATE OR REPLACE PROCEDURE bulk_with_limit
   (deptno_in IN dept.deptno%TYPE)
IS
   CURSOR emps_in_dept_cur IS
      SELECT * FROM emp
       WHERE deptno = deptno_in;

   TYPE emp_tt IS TABLE OF emps_in_dept_cur%ROWTYPE;
   emps emp_tt;
BEGIN
   OPEN emps_in_dept_cur;
   LOOP
      FETCH emps_in_dept_cur
         BULK COLLECT INTO emps LIMIT 1000;

      EXIT WHEN emps.COUNT = 0;

      process_emps (emps);
   END LOOP;
END bulk_with_limit;

Definitely the preferred approach in production applications with large or varying datasets.
Always check the contents of the collection, as opposed to the %NOTFOUND attributes, to determine if you fetched and processed all rows.

Use the FORALL Bulk Bind Statement
PROCEDURE upd_for_dept (...)  IS
BEGIN
   FORALL indx IN low_value .. high_value
      UPDATE employee
         SET salary = newsal_in
       WHERE employee_id = list_of_emps (indx);
END;

Instead of executing repetitive, individual DML statements, load up variables into an array and bind that array into a "template" DML statement.
Only a single DML statement is allowed per FORALL
Can be used with static and dynamic SQL

Use SQL%BULK_ROWCOUNT to determine the number of rows modified by each statement executed.
SQL%ROWCOUNT returns total number of rows modified by the entire FORALL.
Use SAVE_EXCEPTIONS and SQL%BULK_EXCEPTIONS to continue past exceptions in any of the statements.
Granular error recovery and logging
Can also use LOG ERRORS in DML statement in place of SAVE EXCEPTIONS
Use INDICES OF or VALUES OF when bind array is sparse.

Bulk Processing Conclusions
Most important performance tuning feature in PL/SQL.
Almost always the fastest way to execute multi-row SQL operations in PL/SQL.
You trade off increased complexity of code for dramatically faster execution.
But in Oracle Database 10g and above, the compiler will automatically optimize cursor FOR loops to BULK COLLECT efficiency.
No need to convert unless the loop contains DML.
Watch out for the impact on PGA/UGA memory!
By default, Oracle passes all OUT and IN OUT arguments by value, not reference.
This means that OUT and IN OUT arguments always involve some copying of data.
All IN arguments are always passed by reference (no copying).
With NOCOPY, you turn off the copy process.
But it comes with a risk: Oracle will not automatically "rollback" or reverse changes made to your variables if the NOCOPY-ed program raises an exception.

Writing software is a privilege, lots of fun, and a great responsibility.
We're never going to be perfect at it, but there's no reason to stop aiming for perfection.
SELECT �<img src=�&IMAGE_PATH.edit_icon.gif� />� icon,
ename,
job
FROM emp
-------
About Using BRANCH_TO_PAGE_ACCEPT (Is a special Request)

You can use a special request BRANCH_TO_PAGE_ACCEPT for Show processing to automatically submit the page. For example:
f?p=100:1:&APP_SESSION.:BRANCH_TO_PAGE_ACCEPT|SAVE:::P1_DATA:value

Using BRANCH_TO_PAGE_ACCEPT is the same as navigating to page 1, entering a value into the item P1_DATA, and clicking a button that submits the page with a SAVE request.

-------
For example, define an application level substitution string IMAGE_PATH, and give it a value of /dev/images/ Then, reference it in a query as follows:

--------------
http://server/apex/f?p=App:Page:Session:Request:Debug:ClearCache:ItemNames:ItemValues
http://server/apex/f?p=100:1:23929384838429::YES:::
http://server/apex/f?p=100:1:23929384838429::LEVEL7:::
However, it is important to note that the ability to use either of these methods is controlled by an attribute in the application definition.

If you are running an application in development mode debugging will always be available to you. While this may seem a bit odd, this fact will allow developers to interactively debug an application even if the application-level attribute is set to disallow debugging.

-

JQuery

You�re able to start building functional, responsive, and even (sometimes) beautiful web applications with little effort and not much concern for how all the HTML makes it into the page.

Themes and templates allow APEX to separate the application logic from the visual look and feel. This is why you�re able to start building web applications so fast without the need to get bogged down in color, fonts, and layout decisions.

security.synchronizeGroups=true

select * from dba_synonyms where table_name in ('WWV_FLOW_T_VARCHAR2','WWV_FLOW_T_NUMBER'); --APEX_T_VARCHAR2, APEX_T_NUMBER

select apex_string.join(apex_t_varchar2('a','b','c'),':') from dual;

select * from apex_string.shuffle(apex_t_varchar2('One','Two','Three'));


declare
    x APEX_T_VARCHAR2 := apex_t_varchar2('One','Two','Three');
begin
    null;
end;
/

declare
  v_arr apex_t_varchar2;
begin
  select ename
    bulk collect into v_arr
    from emp;

  dbms_output.put_line(apex_string.join(v_arr, ':'));
end;
/

select * from apex_string.shuffle(apex_t_varchar2('One','Two','Three'));

select apex_util.get_hash(
        p_values => apex_t_varchar2 (empno, sal, comm),
        p_salted => true
    ) x
from emp;

select apex_string.format('Hi %1! Hope to see you at the party. It starts at %0.'
    , '18:30'
    , 'Marko'
    , p_max_length => 10) m
from dual;


--Key value tables - PUT/GET/DELETE
declare
  v_table apex_t_varchar2;
begin
  -- populate table
  for i in (select ename, sal from emp)
  loop
    -- put element into table
    apex_string.plist_put(v_table, i.ename, i.sal);
  end loop;


  -- get element from table
  dbms_output.put_line(
    apex_string.plist_get(v_table, 'JONES')
  );
end;
/

-- Email Template
-- https://github.com/mgoricki/presentation-apex-18-hidden-features
declare
  v_placeholders clob;
begin
  apex_util.set_workspace('APXAPP');
  apex_json.initialize_clob_output;
  apex_json.open_object;

  apex_json.write('EVENT_NAME'     , 'MakeIT 2019');
  apex_json.write('EVENT_DATE'     , '15.10.2018.');
  apex_json.write('EVENT_LINK'     , 'N/A');
  apex_json.write('DURATION'       , '2 days');
  apex_json.write('INVITEE'        , 'Saroj Raut');
  apex_json.write('ORGANIZER'      , 'ME');
  apex_json.write('LOCATION'       , 'UK');
  apex_json.write('MY_APPLICATION_LINK', 'Test');
  apex_json.write('NOTES'         , 'n/a');
  apex_json.write('URL_LINK'      , 'n/a');
  apex_json.write('URL_NAME'      , 'n/a');
  apex_json.write('START_TIME'    , '15.10.2018.');

  apex_json.close_object;
  v_placeholders := apex_json.get_clob_output;
  apex_json.free_output;

  -- Create the email template first
  apex_mail.send (
      p_template_static_id => 'EVENT'
    , p_placeholders       => v_placeholders
    , p_to                 => 'saroj.raut@city.ac.uk'
    );
  apex_mail.push_queue;
end;
/

-- Preparing URL
select apex_page.get_url(p_page => '17'
                        , p_items => 'P17_ITEM'
                        , p_values => '1') as my_url
from some_table;

-- OTHER PARAMETERS
-- * p_application        application id or alias. defaults to the current application.
-- * p_page               page id or alias. defaults to the current page.
-- * p_session            session id. defaults to the current session id.
-- * p_request            URL request parameter.
-- * p_debug              URL debug parameter. defaults to the current debug mode.
-- * p_clear_cache        URL clear cache parameter.
-- * p_items              comma delimited list of item names to set session state.
-- * p_values             comma separated list of item values to set session state.
-- * p_printer_friendly   URL printer friendly parameter. defaults tot he current request's printer friendly mode.
-- * p_trace              SQL trace parameter.

select * from apex_string.split('One:Two:Three', ':');
select * from apex_string.split('1234567890',null);



create or replace function random_words(
    p_word_list in apex_t_varchar2,
    p_count     in integer  default 3,   -- max 10 limit enforced
    p_delimeter in varchar2 default '-' )
    return varchar2
is
    s apex_t_varchar2;
begin
    for i in 1 .. least(p_count, 10) loop
        apex_string.push(s, p_word_list(dbms_random.value(1, p_word_list.count)));
    end loop;

    return apex_string.join(s, p_delimeter);
end;
/



set serveroutput on;

declare
    --  Borrowed from xkcd password generator which borrowed it from wherever
    xkcd_words constant apex_t_varchar2 :=
        apex_t_varchar2(
            'ability','able','aboard','about','above','accept','accident','according',
            'account','accurate','acres','across','act','action','active','activity',
            'actual','actually','add','addition','additional','adjective','adult','adventure',
            'advice','affect','afraid','after','afternoon','again','against','age',
            'ago','agree','ahead','aid','air','airplane','alike','alive',
            'all','allow','almost','alone','along','aloud','alphabet','already',
            'also','although','am','among','amount','ancient','angle','angry',
            'animal','announced','another','answer','ants','any','anybody','anyone',
            'anything','anyway','anywhere','apart','apartment','appearance','apple','applied',
            'appropriate','are','area','arm','army','around','arrange','arrangement',
            'arrive','arrow','art','article','as','aside','ask','asleep',
            'at','ate','atmosphere','atom','atomic','attached','attack','attempt',
            'attention','audience','author','automobile','available','average','avoid','aware',
            'away','baby','back','bad','badly','bag','balance','ball',
            'balloon','band','bank','bar','bare','bark','barn','base',
            'baseball','basic','basis','basket','bat','battle','be','bean',
            'bear','beat','beautiful','beauty','became','because','become','becoming',
            'bee','been','before','began','beginning','begun','behavior','behind',
            'being','believed','bell','belong','below','belt','bend','beneath',
            'bent','beside','best','bet','better','between','beyond','bicycle',
            'bigger','biggest','bill','birds','birth','birthday','bit','bite',
            'black','blank','blanket','blew','blind','block','blood','blow',
            'blue','board','boat','body','bone','book','border','born',
            'both','bottle','bottom','bound','bow','bowl','box','boy',
            'brain','branch','brass','brave','bread','break','breakfast','breath',
            'breathe','breathing','breeze','brick','bridge','brief','bright','bring',
            'broad','broke','broken','brother','brought','brown','brush','buffalo',
            'build','building','built','buried','burn','burst','bus','bush',
            'business','busy','but','butter','buy','by','cabin','cage',
            'cake','call','calm','came','camera','camp','can','canal',
            'cannot','cap','capital','captain','captured','car','carbon','card',
            'care','careful','carefully','carried','carry','case','cast','castle',
            'cat','catch','cattle','caught','cause','cave','cell','cent',
            'center','central','century','certain','certainly','chain','chair','chamber',
            'chance','change','changing','chapter','character','characteristic','charge','chart',
            'check','cheese','chemical','chest','chicken','chief','child','children',
            'choice','choose','chose','chosen','church','circle','circus','citizen',
            'city','class','classroom','claws','clay','clean','clear','clearly',
            'climate','climb','clock','close','closely','closer','cloth','clothes',
            'clothing','cloud','club','coach','coal','coast','coat','coffee',
            'cold','collect','college','colony','color','column','combination','combine',
            'come','comfortable','coming','command','common','community','company','compare',
            'compass','complete','completely','complex','composed','composition','compound','concerned',
            'condition','congress','connected','consider','consist','consonant','constantly','construction',
            'contain','continent','continued','contrast','control','conversation','cook','cookies',
            'cool','copper','copy','corn','corner','correct','correctly','cost',
            'cotton','could','count','country','couple','courage','course','court',
            'cover','cow','cowboy','crack','cream','create','creature','crew',
            'crop','cross','crowd','cry','cup','curious','current','curve',
            'customs','cut','cutting','daily','damage','dance','danger','dangerous',
            'dark','darkness','date','daughter','dawn','day','dead','deal',
            'dear','death','decide','declared','deep','deeply','deer','definition',
            'degree','depend','depth','describe','desert','design','desk','detail',
            'determine','develop','development','diagram','diameter','did','die','differ',
            'difference','different','difficult','difficulty','dig','dinner','direct','direction',
            'directly','dirt','dirty','disappear','discover','discovery','discuss','discussion',
            'disease','dish','distance','distant','divide','division','do','doctor',
            'does','dog','doing','doll','dollar','done','donkey','door',
            'dot','double','doubt','down','dozen','draw','drawn','dream',
            'dress','drew','dried','drink','drive','driven','driver','driving',
            'drop','dropped','drove','dry','duck','due','dug','dull',
            'during','dust','duty','each','eager','ear','earlier','early',
            'earn','earth','easier','easily','east','easy','eat','eaten',
            'edge','education','effect','effort','egg','eight','either','electric',
            'electricity','element','elephant','eleven','else','empty','end','enemy',
            'energy','engine','engineer','enjoy','enough','enter','entire','entirely',
            'environment','equal','equally','equator','equipment','escape','especially','essential',
            'establish','even','evening','event','eventually','ever','every','everybody',
            'everyone','everything','everywhere','evidence','exact','exactly','examine','example',
            'excellent','except','exchange','excited','excitement','exciting','exclaimed','exercise',
            'exist','expect','experience','experiment','explain','explanation','explore','express',
            'expression','extra','eye','face','facing','fact','factor','factory',
            'failed','fair','fairly','fall','fallen','familiar','family','famous',
            'far','farm','farmer','farther','fast','fastened','faster','fat',
            'father','favorite','fear','feathers','feature','fed','feed','feel',
            'feet','fell','fellow','felt','fence','few','fewer','field',
            'fierce','fifteen','fifth','fifty','fight','fighting','figure','fill',
            'film','final','finally','find','fine','finest','finger','finish',
            'fire','fireplace','firm','first','fish','five','fix','flag',
            'flame','flat','flew','flies','flight','floating','floor','flow',
            'flower','fly','fog','folks','follow','food','foot','football',
            'for','force','foreign','forest','forget','forgot','forgotten','form',
            'former','fort','forth','forty','forward','fought','found','four',
            'fourth','fox','frame','free','freedom','frequently','fresh','friend',
            'friendly','frighten','frog','from','front','frozen','fruit','fuel',
            'full','fully','fun','function','funny','fur','furniture','further',
            'future','gain','game','garage','garden','gas','gasoline','gate',
            'gather','gave','general','generally','gentle','gently','get','getting',
            'giant','gift','girl','give','given','giving','glad','glass',
            'globe','go','goes','gold','golden','gone','good','goose',
            'got','government','grabbed','grade','gradually','grain','grandfather','grandmother',
            'graph','grass','gravity','gray','great','greater','greatest','greatly',
            'green','grew','ground','group','grow','grown','growth','guard',
            'guess','guide','gulf','gun','habit','had','hair','half',
            'halfway','hall','hand','handle','handsome','hang','happen','happened',
            'happily','happy','harbor','hard','harder','hardly','has','hat',
            'have','having','hay','he','headed','heading','health','heard',
            'hearing','heart','heat','heavy','height','held','hello','help',
            'helpful','her','herd','here','herself','hidden','hide','high',
            'higher','highest','highway','hill','him','himself','his','history',
            'hit','hold','hole','hollow','home','honor','hope','horn',
            'horse','hospital','hot','hour','house','how','however','huge',
            'human','hundred','hung','hungry','hunt','hunter','hurried','hurry',
            'hurt','husband','ice','idea','identity','if','ill','image',
            'imagine','immediately','importance','important','impossible','improve','in','inch',
            'include','including','income','increase','indeed','independent','indicate','individual',
            'industrial','industry','influence','information','inside','instance','instant','instead',
            'instrument','interest','interior','into','introduced','invented','involved','iron',
            'is','island','it','its','itself','jack','jar','jet',
            'job','join','joined','journey','joy','judge','jump','jungle',
            'just','keep','kept','key','kids','kill','kind','kitchen',
            'knew','knife','know','knowledge','known','label','labor','lack',
            'lady','laid','lake','lamp','land','language','large','larger',
            'largest','last','late','later','laugh','law','lay','layers',
            'lead','leader','leaf','learn','least','leather','leave','leaving',
            'led','left','leg','length','lesson','let','letter','level',
            'library','lie','life','lift','light','like','likely','limited',
            'line','lion','lips','liquid','list','listen','little','live',
            'living','load','local','locate','location','log','lonely','long',
            'longer','look','loose','lose','loss','lost','lot','loud',
            'love','lovely','low','lower','luck','lucky','lunch','lungs',
            'lying','machine','machinery','mad','made','magic','magnet','mail',
            'main','mainly','major','make','making','man','managed','manner',
            'manufacturing','many','map','mark','market','married','mass','massage',
            'master','material','mathematics','matter','may','maybe','me','meal',
            'mean','means','meant','measure','meat','medicine','meet','melted',
            'member','memory','men','mental','merely','met','metal','method',
            'mice','middle','might','mighty','mile','military','milk','mill',
            'mind','mine','minerals','minute','mirror','missing','mission','mistake',
            'mix','mixture','model','modern','molecular','moment','money','monkey',
            'month','mood','moon','more','morning','most','mostly','mother',
            'motion','motor','mountain','mouse','mouth','move','movement','movie',
            'moving','mud','muscle','music','musical','must','my','myself',
            'mysterious','nails','name','nation','national','native','natural','naturally',
            'nature','near','nearby','nearer','nearest','nearly','necessary','neck',
            'needed','needle','needs','negative','neighbor','neighborhood','nervous','nest',
            'never','new','news','newspaper','next','nice','night','nine',
            'no','nobody','nodded','noise','none','noon','nor','north',
            'nose','not','note','noted','nothing','notice','noun','now',
            'number','numeral','nuts','object','observe','obtain','occasionally','occur',
            'ocean','of','off','offer','office','officer','official','oil',
            'old','older','oldest','on','once','one','only','onto',
            'open','operation','opinion','opportunity','opposite','or','orange','orbit',
            'order','ordinary','organization','organized','origin','original','other','ought',
            'our','ourselves','out','outer','outline','outside','over','own',
            'owner','oxygen','pack','package','page','paid','pain','paint',
            'pair','palace','pale','pan','paper','paragraph','parallel','parent',
            'park','part','particles','particular','particularly','partly','parts','party',
            'pass','passage','past','path','pattern','pay','peace','pen',
            'pencil','people','per','percent','perfect','perfectly','perhaps','period',
            'person','personal','pet','phrase','physical','piano','pick','picture',
            'pictured','pie','piece','pig','pile','pilot','pine','pink',
            'pipe','pitch','place','plain','plan','plane','planet','planned',
            'planning','plant','plastic','plate','plates','play','pleasant','please',
            'pleasure','plenty','plural','plus','pocket','poem','poet','poetry',
            'point','pole','police','policeman','political','pond','pony','pool',
            'poor','popular','population','porch','port','position','positive','possible',
            'possibly','post','pot','potatoes','pound','pour','powder','power',
            'powerful','practical','practice','prepare','present','president','press','pressure',
            'pretty','prevent','previous','price','pride','primitive','principal','principle',
            'printed','private','prize','probably','problem','process','produce','product',
            'production','program','progress','promised','proper','properly','property','protection',
            'proud','prove','provide','public','pull','pupil','pure','purple',
            'purpose','push','put','putting','quarter','queen','question','quick',
            'quickly','quiet','quietly','quite','rabbit','race','radio','railroad',
            'rain','raise','ran','ranch','range','rapidly','rate','rather',
            'raw','rays','reach','read','reader','ready','real','realize',
            'rear','reason','recall','receive','recent','recently','recognize','record',
            'red','refer','refused','region','regular','related','relationship','religious',
            'remain','remarkable','remember','remove','repeat','replace','replied','report',
            'represent','require','research','respect','rest','result','return','review',
            'rhyme','rhythm','rice','rich','ride','riding','right','ring',
            'rise','rising','river','road','roar','rock','rocket','rocky',
            'rod','roll','roof','room','root','rope','rose','rough',
            'round','route','row','rubbed','rubber','rule','ruler','run',
            'running','rush','sad','saddle','safe','safety','said','sail',
            'sale','salmon','salt','same','sand','sang','sat','satellites',
            'satisfied','save','saved','saw','say','scale','scared','scene',
            'school','science','scientific','scientist','score','screen','sea','search',
            'season','seat','second','secret','section','see','seed','seeing',
            'seems','seen','seldom','select','selection','sell','send','sense',
            'sent','sentence','separate','series','serious','serve','service','sets',
            'setting','settle','settlers','seven','several','shade','shadow','shake',
            'shaking','shall','shallow','shape','share','sharp','she','sheep',
            'sheet','shelf','shells','shelter','shine','shinning','ship','shirt',
            'shoe','shoot','shop','shore','short','shorter','shot','should',
            'shoulder','shout','show','shown','shut','sick','sides','sight',
            'sign','signal','silence','silent','silk','silly','silver','similar',
            'simple','simplest','simply','since','sing','single','sink','sister',
            'sit','sitting','situation','six','size','skill','skin','sky',
            'slabs','slave','sleep','slept','slide','slight','slightly','slip',
            'slipped','slope','slow','slowly','small','smaller','smallest','smell',
            'smile','smoke','smooth','snake','snow','so','soap','social',
            'society','soft','softly','soil','solar','sold','soldier','solid',
            'solution','solve','some','somebody','somehow','someone','something','sometime',
            'somewhere','son','song','soon','sort','sound','source','south',
            'southern','space','speak','special','species','specific','speech','speed',
            'spell','spend','spent','spider','spin','spirit','spite','split',
            'spoken','sport','spread','spring','square','stage','stairs','stand',
            'standard','star','stared','start','state','statement','station','stay',
            'steady','steam','steel','steep','stems','step','stepped','stick',
            'stiff','still','stock','stomach','stone','stood','stop','stopped',
            'store','storm','story','stove','straight','strange','stranger','straw',
            'stream','street','strength','stretch','strike','string','strip','strong',
            'stronger','struck','structure','struggle','stuck','student','studied','studying',
            'subject','substance','success','successful','such','sudden','suddenly','sugar',
            'suggest','suit','sum','summer','sun','sunlight','supper','supply',
            'support','suppose','sure','surface','surprise','surrounded','swam','sweet',
            'swept','swim','swimming','swing','swung','syllable','symbol','system',
            'table','tail','take','taken','tales','talk','tall','tank',
            'tape','task','taste','taught','tax','tea','teach','teacher',
            'team','tears','teeth','telephone','television','tell','temperature','ten',
            'tent','term','terrible','test','than','thank','that','thee',
            'them','themselves','then','theory','there','therefore','these','they',
            'thick','thin','thing','think','third','thirty','this','those',
            'thou','though','thought','thousand','thread','three','threw','throat',
            'through','throughout','throw','thrown','thumb','thus','thy','tide',
            'tie','tight','tightly','till','time','tin','tiny','tip',
            'tired','title','to','tobacco','today','together','told','tomorrow',
            'tone','tongue','tonight','too','took','tool','top','topic',
            'torn','total','touch','toward','tower','town','toy','trace',
            'track','trade','traffic','trail','train','transportation','trap','travel',
            'treated','tree','triangle','tribe','trick','tried','trip','troops',
            'tropical','trouble','truck','trunk','truth','try','tube','tune',
            'turn','twelve','twenty','twice','two','type','typical','uncle',
            'under','underline','understanding','unhappy','union','unit','universe','unknown',
            'unless','until','unusual','up','upon','upper','upward','us',
            'use','useful','using','usual','usually','valley','valuable','value',
            'vapor','variety','various','vast','vegetable','verb','vertical','very',
            'vessels','victory','view','village','visit','visitor','voice','volume',
            'vote','vowel','voyage','wagon','wait','walk','wall','want',
            'war','warm','warn','was','wash','waste','watch','water',
            'wave','way','we','weak','wealth','wear','weather','week',
            'weigh','weight','welcome','well','went','were','west','western',
            'wet','whale','what','whatever','wheat','wheel','when','whenever',
            'where','wherever','whether','which','while','whispered','whistle','white',
            'who','whole','whom','whose','why','wide','widely','wife',
            'wild','will','willing','win','wind','window','wing','winter',
            'wire','wise','wish','with','within','without','wolf','women',
            'won','wonder','wonderful','wood','wooden','wool','word','wore',
            'work','worker','world','worried','worry','worse','worth','would',
            'wrapped','write','writer','writing','written','wrong','wrote','yard',
            'year','yellow','yes','yesterday','yet','you','young','younger',
            'your','yourself','youth','zero','zoo' );

begin
    for i in 1 .. 10 loop
        dbms_output.put_line(random_words(xkcd_words));
    end loop;
end;
/
