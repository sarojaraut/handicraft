
nginx has one master process and several worker processes. 

The main purpose of the master process is to read and evaluate configuration, and maintain worker processes. Worker processes do actual processing of requests. nginx employs event-based model and OS-dependent mechanisms to efficiently distribute requests among worker processes. The number of worker processes is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores (see worker_processes).

The way nginx and its modules work is determined in the configuration file. By default, the configuration file is named nginx.conf and placed in the directory /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx. In clr server the location is /etc/nginx

https://serversforhackers.com/c/getting-started-with-nginx

nginx -v

tail -f /var/log/nginx/access.log
tail -f /var/log/nginx/error.log

more /etc/nginx/nginx.conf
more /etc/nginx/conf.d 
more /etc/nginx/default.d 

nginx -s signal

nginx -s reload
  Other options are 
    stop — fast shutdown
    quit — graceful shutdown
    reload — reloading the configuration file
    reopen — reopening the log files

yum install nginx
systemctl start nginx
systemctl status nginx

sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/log/nginx/error.log

sudo service nginx reload
Turn up the verbosity with these flags:
nginx -c /etc/nginx/nginx.conf -t
The -c flag indicates a certain configuration file will follow; the -t flag tells Nginx to test our configuration.

pm2 logs
ip addr show 
ip show

Changes made in the configuration file will not be applied until the command to reload configuration is sent to nginx or it is restarted. nginx -s reload

Once the master process receives the signal to reload configuration, it checks the syntax validity of the new configuration file If this is a success, the master process starts new worker processes and sends messages to old worker processes, requesting them to shut down. Otherwise, the master process rolls back the changes and continues to work with the old configuration. Old worker processes, receiving a command to shut down, stop accepting new connections and continue to service current requests until all such requests are serviced. After that, the old worker processes exit.

For getting the list of all running nginx processes, the ps utility may be used, for example, in the following way:

ps -ax | grep nginx

###Configuration File’s Structure

directive: the option that consists of name and parameters; it should end with a semicolon
context: the section where you can declare directives (similar to scope in programming languages)

nginx consists of modules which are controlled by directives specified in the configuration file. Directives are divided into simple directives and block directives. A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;). A block directive has the same structure as a simple directive, but instead of the semicolon it ends with a set of additional instructions surrounded by braces ({ and }). If a block directive can have other directives inside braces, it is called a context (examples: events, http, server, and location).

Directives placed in the configuration file outside of any contexts are considered to be in the main context. The events and http directives reside in the main context, server in http, and location in server.

The rest of a line after the # sign is considered a comment.

There are 3 types of directives, each with its own inheritance model.

Following line needed in the static html files to avoid character encoding 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

nginx: [emerg] could not build server_names_hash, you should increase server_names_hash_bucket_size: 32

if something does not work then we can access access.log or error.log 

---

### Serving Static Content

An important web server task is serving out files (such as images or static HTML pages). You will implement an example where, depending on the request, files will be served from different local directories: /data/www (which may contain HTML files) and /data/images (containing images). This will require editing of the configuration file and setting up of a server block inside the http block with two location blocks.

First, create the /data/www directory and put an index.html file with any text content into it and create the /data/images directory and place some images in it.

Next, open the configuration file. The default configuration file already includes several examples of the server block, mostly commented out. For now comment out all such blocks and start a new server block:

http {
    server {
    }
}
Generally, the configuration file may include several server blocks distinguished by ports on which they listen to and by server names. Once nginx decides which server processes a request, it tests the URI specified in the request’s header against the parameters of the location directives defined inside the server block.

Add the following location block to the server block:

location / {
    root /data/www;
}
This location block specifies the “/” prefix compared with the URI from the request. For matching requests, the URI will be added to the path specified in the root directive, that is, to /data/www, to form the path to the requested file on the local file system. If there are several matching location blocks nginx selects the one with the longest prefix. The location block above provides the shortest prefix, of length one, and so only if all other location blocks fail to provide a match, this block will be used.

Next, add the second location block:

location /images/ {
    root /data;
}
It will be a match for requests starting with /images/ (location / also matches such requests, but has shorter prefix).

The resulting configuration of the server block should look like this:

server {
    location / {
        root /data/www;
    }

    location /images/ {
        root /data;
    }
}

sudo tail -f /var/log/nginx/error.log
sudo tail -f /var/log/nginx/error.log

### Setting Up a Simple Proxy Server
One of the frequent uses of nginx is setting it up as a proxy server, which means a server that receives requests, passes them to the proxied servers, retrieves responses from them, and sends them to the clients.

We will configure a basic proxy server, which serves requests of images with files from the local directory and sends all other requests to a proxied server. In this example, both servers will be defined on a single nginx instance.

First, define the proxied server by adding one more server block to the nginx’s configuration file with the following contents:

server {
    listen 8080;
    root /data/up1;

    location / {
    }
}

This will be a simple server that listens on the port 8080 (previously, the listen directive has not been specified since the standard port 80 was used) and maps all requests to the /data/up1 directory on the local file system. Create this directory and put the index.html file into it. Note that the root directive is placed in the server context. Such root directive is used when the location block selected for serving a request does not include own root directive.

Next, use the server configuration from the previous section and modify it to make it a proxy server configuration. In the first location block, put the proxy_pass directive with the protocol, name and port of the proxied server specified in the parameter (in our case, it is http://localhost:8080):

server {
    location / {
        proxy_pass http://localhost:8080;
    }

    location /images/ {
        root /data;
    }
}
We will modify the second location block, which currently maps requests with the /images/ prefix to the files under the /data/images directory, to make it match the requests of images with typical file extensions. The modified location block looks like this:

location ~ \.(gif|jpg|png)$ {
    root /data/images;
}
The parameter is a regular expression matching all URIs ending with .gif, .jpg, or .png. A regular expression should be preceded with ~. The corresponding requests will be mapped to the /data/images directory.

When nginx selects a location block to serve a request it first checks location directives that specify prefixes, remembering location with the longest prefix, and then checks regular expressions. If there is a match with a regular expression, nginx picks this location or, otherwise, it picks the one remembered earlier.

The resulting configuration of a proxy server will look like this:

server {
    location / {
        proxy_pass http://localhost:8080/;
    }

    location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}
This server will filter requests ending with .gif, .jpg, or .png and map them to the /data/images directory (by adding URI to the root directive’s parameter) and pass all other requests to the proxied server configured above.

To apply new configuration, send the reload signal to nginx as described in the previous sections.

There are many more directives that may be used to further configure a proxy connection.

NGINX Contexts
The Core Contexts : http://nginx.org/en/docs/dirindex.html
The most general context is the “main” or “global” context. It is the only context that is not contained within the typical context blocks that look like this:

# The main context is here, outside any other contexts
. . .
context {
    . . .
}

The Events Context
The “events” context is contained within the “main” context. It is used to set global options that affect how Nginx handles connections at a general level. There can only be a single events context defined within the Nginx configuration.

The HTTP Context
This context will contain all of the directives and other contexts necessary to define how the program will handle HTTP or HTTPS connections. The http context is a sibling of the events context, so they should be listed side-by-side, rather than nested. They both are children of the main context:
Some of the directives that you are likely to encounter control the default locations for access and error logs (access_log and error_log), log_format

The Server Context
The “server” context is declared within the “http” context. You can have as many server blocks as you need, each of which can handle a specific subset of connections. The directives which decide if a server block will be used to answer a request are:

listen: The ip address / port combination that this server block is designed to respond to. If a request is made by a client that matches these values, this block will potentially be selected to handle the connection.
server_name: This directive is the other component used to select a server block for processing. If there are multiple server blocks with listen directives of the same specificity that can handle the request, Nginx will parse the “Host” header of the request and match it against this directive.



---------------------------

server 
server_name 
location
root
Reverse proxy

https://wiki.archlinux.org/index.php/nginx
It is possible to serve multiple domains using server blocks. These are comparable to "VirtualHosts" in Apache.
It is possible to put different server blocks in different files. This allows you to easily enable or disable certain sites.

Create the following directories:
# mkdir /etc/nginx/sites-available
# mkdir /etc/nginx/sites-enabled
Create a file inside the sites-available directory that contains one or more server blocks:

/etc/nginx/sites-available/example.conf
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ...
}

Append include sites-enabled/*; to the end of the http block:

/etc/nginx/nginx.conf
http {
    ...
    include sites-enabled/*;
}

To enable a site, simple create a symlink:

# ln -s /etc/nginx/sites-available/example.conf /etc/nginx/sites-enabled/example.conf
To disable a site, unlink the active symlink:

# unlink /etc/nginx/sites-enabled/example.conf

Reload/restart nginx.service to enable changes to the sites configuration.


https://carrot.is/coding/nginx_introduction?ref=hackr.io

Processing requests
Inside nginx, you can specify multiple virtual servers, each described by a server { } context. Ngnix first decides wich server to process the request, 

http://nginx.org/en/docs/http/request_processing.html

Nginx will choose the virtual server in the following order:

Server listing on IP:port, with a matching server_name directive;
Server listing on IP:port, with the default_server flag; Note that the default server is a property of the listen port and not of the server name.
Server listing on IP:port, first one defined;
If there are no matches, refuse the connection.

The server_name directive
http://nginx.org/en/docs/http/server_names.html
The server_name directive accepts multiple values. It also handles wildcard matching and regular expressions.

server_name netguru.co www.netguru.co; # exact match
server_name *.netguru.co;              # wildcard matching
server_name netguru.*;                 # wildcard matching
server_name  ~^[0-9]*\.netguru\.co$;   # regexp matching

When there is ambiguity, nginx uses the following order:

Exact name;
Longest wildcard name starting with an asterisk, e.g. “*.example.org”;
Longest wildcard name ending with an asterisk, e.g. “mail.*”;
First matching regular expression (in the order of appearance in the configuration file).

Nginx will store 3 hash tables: exact names, wildcards starting with an asterisk, and wildcards ending with an asterisk. If the result is not in any of the tables, the regular expressions will be tested sequentially.

It is worth keeping in mind that

server_name .netguru.co;
is an abbreviation of:

server_name  netguru.co  www.netguru.co  *.netguru.co;
With one difference: .netguru.co is stored in the second table, which means that it is a bit slower than an explicit declaration.

listen directive
In most cases, you’ll find that the listen directive accepts IP:port values.

listen 127.0.0.1:80;
listen 127.0.0.1;    # by default port :80 is used

listen *:81;
listen 81;           # by default all ips are used

listen [::]:80;      # IPv6 addresses
listen [::1];        # IPv6 addresses

root directive
The root directive sets the root directory for requests, allowing nginx to map the incoming request onto the file system.

server {
  listen 80;
  server_name netguru.co;
  root /var/www/netguru.co;
}
Which allows nginx to return server content according to the request:

netguru.co:80/index.html     # returns /var/www/netguru.com/index.html
netguru.co:80/foo/index.html # returns /var/www/netguru.com/foo/index.html


##location directive
The location directive sets the configuration depending on the requested URI.

location [modifier] path

location /foo {
  # ...
}
When no modifier is specified, the path is treated as prefix, after which anything can follow. The above example will match:

/foo
/fooo
/foo123
/foo/bar/index.html
...
Also, multiple location directives can be used in a given context:

server {
  listen 80;
  server_name netguru.co;
  root /var/www/netguru.co;

  location / {
    return 200 "root";
  }

  location /foo {
    return 200 "foo";
  }
}
netguru.co:80   /       # => "root"
netguru.co:80   /foo    # => "foo"
netguru.co:80   /foo123 # => "foo"
netguru.co:80   /bar    # => "root"
Nginx also provides a few modifiers which can be used in conjunction with location. These modifiers impact which location block will be used, as each modifier has assigned precedence.

=           - Exact match
^~          - Preferential match
~ && ~*     - Regex match
no modifier - Prefix match
Nginx will first check for any exact matches. If it doesn't find any, it'll look for preferential ones. If this match also fails, regex matches will be tested in the order of their appearance. If everything else fails, the last prefix match will be used.

location /match {
  return 200 'Prefix match: matches everything that starting with /match';
}

location ~* /match[0-9] {
  return 200 'Case insensitive regex match';
}

location ~ /MATCH[0-9] {
  return 200 'Case sensitive regex match';
}

location ^~ /match0 {
  return 200 'Preferential match';
}

location = /match {
  return 200 'Exact match';
}
/match     # => 'Exact match'
/match0    # => 'Preferential match'
/match1    # => 'Case insensitive regex match'
/MATCH1    # => 'Case sensitive regex match'
/match-abc # => 'Prefix match: matches everything that starting with /match'


--- Server Names 



